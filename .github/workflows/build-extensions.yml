name: Test WasmEdge extensions

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

on:
  push:
    branches:
      - master
    paths:
      - ".github/workflows/build-extensions.yml"
      - "plugins/**"
      - "examples/**"
      - "rpm/**"
      - "test/**"
      - "thirdparty/**"
      - "tools/**"
      - "CMakeLists.txt"
      - "cmake/**"
  pull_request:
    branches:
      - master
      - "proposal/**"
    paths:
      - ".github/workflows/build-extensions.yml"
      - "plugins/**"
      - "examples/**"
      - "rpm/**"
      - "test/**"
      - "thirdparty/**"
      - "tools/**"
      - "CMakeLists.txt"
      - "cmake/**"

jobs:
  # TODO: Refactor `lint` with `on.workflow_run`
  # https://docs.github.com/en/actions/using-workflows/triggering-a-workflow
  lint:
    uses: ./.github/workflows/reusable-call-linter.yml

  get_version_v2:
    name: Retrieve version information (v2)
    needs: lint
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.prep.outputs.version }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Get version
        id: prep
        run: |
          # Retrieve annotated tags. Details: https://github.com/actions/checkout/issues/290
          git fetch --tags --force
          echo "Set version: $(git describe --match "[0-9].[0-9]*" --tag)"
          echo ::set-output name=version::$(git describe --match "[0-9].[0-9]*" --tag)

  build_ubuntu:
    strategy:
      matrix:
        include:
          - name: WASI-NN PyTorch
            tar_name: wasi_nn-pytorch
            backend: PyTorch
            compiler: clang++
            docker_tag: ubuntu-build-clang
            output_path: plugins/wasi_nn
            output_bin: libwasmedgePluginWasiNN.so
            test_path: test/plugins/wasi_nn
            test_bin: wasiNNTests
            build_type: Release
          - name: WASI-NN PyTorch
            tar_name: wasi_nn-pytorch
            backend: PyTorch
            compiler: g++
            docker_tag: ubuntu-build-gcc
            output_path: plugins/wasi_nn
            output_bin: libwasmedgePluginWasiNN.so
            test_path: test/plugins/wasi_nn
            test_bin: wasiNNTests
            build_type: Release
          - name: WASI-NN OpenVINO
            tar_name: wasi_nn-openvino
            backend: OpenVINO
            compiler: g++
            docker_tag: ubuntu-build-gcc
            output_path: plugins/wasi_nn
            output_bin: libwasmedgePluginWasiNN.so
            test_path: test/plugins/wasi_nn
            test_bin: wasiNNTests
            build_type: Release
          - name: WASI-NN OpenVINO
            tar_name: wasi_nn-openvino
            backend: OpenVINO
            compiler: clang++
            docker_tag: ubuntu-build-clang
            output_path: plugins/wasi_nn
            output_bin: libwasmedgePluginWasiNN.so
            test_path: test/plugins/wasi_nn
            test_bin: wasiNNTests
            build_type: Release
          - name: WASI-NN TensorFlowLite
            tar_name: wasi_nn-tensorflowlite
            backend: TensorFlowLite
            compiler: g++
            docker_tag: ubuntu-build-gcc
            output_path: plugins/wasi_nn
            output_bin: libwasmedgePluginWasiNN.so
            test_path: test/plugins/wasi_nn
            test_bin: wasiNNTests
            build_type: Release
          - name: WASI-NN TensorFlowLite
            tar_name: wasi_nn-tensorflowlite
            backend: TensorFlowLite
            compiler: clang++
            docker_tag: ubuntu-build-clang
            output_path: plugins/wasi_nn
            output_bin: libwasmedgePluginWasiNN.so
            test_path: test/plugins/wasi_nn
            test_bin: wasiNNTests
            build_type: Release
          - name: WASI-Crypto
            tar_name: wasi_crypto
            compiler: g++
            docker_tag: ubuntu-build-gcc
            output_path: plugins/wasi_crypto
            output_bin: libwasmedgePluginWasiCrypto.so
            test_path: test/plugins/wasi_crypto
            test_bin: wasiCryptoTests
            build_type: Release
          - name: WASI-Crypto
            tar_name: wasi_crypto
            compiler: clang++
            docker_tag: ubuntu-build-clang
            output_path: plugins/wasi_crypto
            output_bin: libwasmedgePluginWasiCrypto.so
            test_path: test/plugins/wasi_crypto
            test_bin: wasiCryptoTests
            build_type: Release
          - name: HttpsReq
            tar_name: wasmedge_httpsreq
            compiler: g++
            docker_tag: ubuntu-build-gcc
            output_path: plugins/wasmedge_httpsreq
            output_bin: libwasmedgePluginHttpsReq.so
            test_path: test/plugins/wasmedge_httpsreq
            test_bin: wasmedgeHttpsReqTests
            build_type: Release
          - name: HttpsReq
            tar_name: wasmedge_httpsreq
            compiler: clang++
            docker_tag: ubuntu-build-clang
            output_path: plugins/wasmedge_httpsreq
            output_bin: libwasmedgePluginHttpsReq.so
            test_path: test/plugins/wasmedge_httpsreq
            test_bin: wasmedgeHttpsReqTests
            build_type: Release
          - name: Process
            tar_name: wasmedge_process
            compiler: g++
            docker_tag: ubuntu-build-gcc
            output_path: plugins/wasmedge_process
            output_bin: libwasmedgePluginWasmEdgeProcess.so
            test_path: test/plugins/wasmedge_process
            test_bin: wasmedgeProcessTests
            build_type: Release
          - name: Process
            tar_name: wasmedge_process
            compiler: clang++
            docker_tag: ubuntu-build-clang
            output_path: plugins/wasmedge_process
            output_bin: libwasmedgePluginWasmEdgeProcess.so
            test_path: test/plugins/wasmedge_process
            test_bin: wasmedgeProcessTests
            build_type: Release
    name: Ubuntu 20.04 WasmEdge ${{ matrix.name }} plugin with ${{ matrix.compiler}} ${{ matrix.build_type}}
    runs-on: ubuntu-latest
    needs: [get_version_v2]
    container:
      image: wasmedge/wasmedge:${{ matrix.docker_tag }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Build WasmEdge WASI-NN ${{ matrix.backend }} plugin using ${{ matrix.compiler }} with ${{ matrix.build_type }} mode
        shell: bash
        if: contains(matrix.name, 'WASI-NN')
        env:
          OPENVINO_VERSION: "2021.4.582"
          OPENVINO_YEAR: "2021"
          PYTORCH_VERSION: "1.8.2"
          PYTORCH_INSTALL_TO: "build"
        run: |
          mkdir -p build
          if [[ "${{ matrix.name }}" == *"OpenVINO"* ]]; then
            bash utils/wasi-nn/install-openvino.sh
            source /opt/intel/openvino_2021/bin/setupvars.sh
            ldconfig
          fi
          if [[ "${{ matrix.name }}" == *"PyTorch"* ]]; then
            apt update
            apt install unzip
            bash utils/wasi-nn/install-pytorch.sh
            export Torch_DIR=$(pwd)/${PYTORCH_INSTALL_TO}/libtorch
          fi
          cd build
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DWASMEDGE_PLUGIN_WASI_NN_BACKEND="${{ matrix.backend }}" -DWASMEDGE_BUILD_TESTS=ON ..
          cd ${{ matrix.test_path }}
          make -j
      - name: Build WasmEdge WASI-Crypto plugin using ${{ matrix.compiler }} with ${{ matrix.build_type }} mode
        if: contains(matrix.name, 'WASI-Crypto')
        run: |
          apt update
          apt install -y libssl-dev
          mkdir -p build
          cd build
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DWASMEDGE_PLUGIN_WASI_CRYPTO=On -DWASMEDGE_BUILD_TESTS=ON ..
          cd ${{ matrix.test_path }}
          make -j
      - name: Build WasmEdge HttpsReq plugin using ${{ matrix.compiler }} with ${{ matrix.build_type }} mode
        if: contains(matrix.name, 'HttpsReq')
        run: |
          apt update
          apt install -y libssl-dev
          mkdir -p build
          cd build
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DWASMEDGE_PLUGIN_HTTPSREQ=ON -DWASMEDGE_BUILD_TESTS=ON ..
          cd ${{ matrix.test_path }}
          make -j
      - name: Build WasmEdge Process plugin using ${{ matrix.compiler }} with ${{ matrix.build_type }} mode
        if: contains(matrix.name, 'Process')
        run: |
          mkdir -p build
          cd build
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DWASMEDGE_PLUGIN_PROCESS=ON -DWASMEDGE_BUILD_TESTS=ON ..
          cd ${{ matrix.test_path }}
          make -j
      - name: Test WasmEdge ${{ matrix.name }} plugin using ${{ matrix.compiler }} with ${{ matrix.build_type }} mode
        shell: bash
        run: |
          if [[ "${{ matrix.name }}" == *"OpenVINO"* ]]; then
            source /opt/intel/openvino_2021/bin/setupvars.sh
            ldconfig
          fi
          if [[ "${{ matrix.name }}" == *"PyTorch"* ]]; then
            export LD_LIBRARY_PATH=$Torch_DIR/lib:$LD_LIBRARY_PATH
          fi
          cd build/${{ matrix.test_path }}
          ./${{ matrix.test_bin }}
      - name: Prepare the WasmEdge ${{ matrix.name }} plugin tar.gz package
        run: |
          cp build/${{ matrix.output_path }}/${{ matrix.output_bin }} ${{ matrix.output_bin }}
          tar -zcvf plugin.tar.gz ${{ matrix.output_bin }}
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: WasmEdge-plugin-${{ matrix.tar_name }}-${{ needs.get_version_v2.outputs.version }}-ubuntu20.04-${{ matrix.compiler }}.tar.gz
          path: plugin.tar.gz

  build_manylinux:
    strategy:
      matrix:
        include:
          - name: WASI-NN PyTorch
            tar_name: wasi_nn-pytorch
            backend: PyTorch
            system: manylinux2014 x86_64
            host_runner: ubuntu-latest
            docker_tag: manylinux2014_x86_64
            test_path: test/plugins/wasi_nn
            test_bin: wasiNNTests
            output_path: plugins/wasi_nn
            output_bin: libwasmedgePluginWasiNN.so
            deps_path: "utils/wasi-nn/install-pytorch.sh --disable-cxx11-abi"
            cmake_plugin_option: "-DWASMEDGE_PLUGIN_WASI_NN_BACKEND=PyTorch"
            build_type: Release
            test: true
          - name: WASI-NN Tensorflow Lite
            tar_name: wasi_nn-tensorflowlite
            backend: Tensorflowlite
            system: manylinux2014 x86_64
            host_runner: ubuntu-latest
            docker_tag: manylinux2014_x86_64
            test_path: test/plugins/wasi_nn
            test_bin: wasiNNTests
            output_path: plugins/wasi_nn
            output_bin: libwasmedgePluginWasiNN.so
            cmake_plugin_option: "-DWASMEDGE_PLUGIN_WASI_NN_BACKEND=TensorflowLite"
            build_type: Release
            test: true
          - name: WASI-NN Tensorflow Lite
            tar_name: wasi_nn-tensorflowlite
            backend: Tensorflowlite
            system: manylinux2014 aarch64
            host_runner: linux-arm64
            docker_tag: manylinux2014_aarch64
            test_path: test/plugins/wasi_nn
            test_bin: wasiNNTests
            output_path: plugins/wasi_nn
            output_bin: libwasmedgePluginWasiNN.so
            cmake_plugin_option: "-DWASMEDGE_PLUGIN_WASI_NN_BACKEND=TensorflowLite"
            build_type: Release
            test: true
          - name: WASI-Crypto
            tar_name: wasi_crypto
            system: manylinux2014 x86_64
            host_runner: ubuntu-latest
            docker_tag: manylinux2014_x86_64
            output_path: plugins/wasi_crypto
            output_bin: libwasmedgePluginWasiCrypto.so
            deps_path: "utils/wasi-crypto/build-openssl.sh"
            cmake_plugin_option: "-DWASMEDGE_PLUGIN_WASI_CRYPTO=ON -DOPENSSL_ROOT_DIR=$(pwd)/openssl-1.1.1n/openssl"
            build_type: Release
            test: false
          - name: WASI-Crypto
            tar_name: wasi_crypto
            system: manylinux2014 aarch64
            host_runner: linux-arm64
            docker_tag: manylinux2014_aarch64
            output_path: plugins/wasi_crypto
            output_bin: libwasmedgePluginWasiCrypto.so
            deps_path: "utils/wasi-crypto/build-openssl.sh"
            cmake_plugin_option: "-DWASMEDGE_PLUGIN_WASI_CRYPTO=ON -DOPENSSL_ROOT_DIR=$(pwd)/openssl-1.1.1n/openssl"
            build_type: Release
            test: false
          - name: HttpsReq
            tar_name: wasmedge_httpsreq
            system: manylinux2014 x86_64
            host_runner: ubuntu-latest
            docker_tag: manylinux2014_x86_64
            output_path: plugins/wasmedge_httpsreq
            output_bin: libwasmedgePluginHttpsReq.so
            deps_path: "utils/wasmedge_httpsreq/build-openssl.sh"
            cmake_plugin_option: "-DWASMEDGE_PLUGIN_HTTPSREQ=ON -DOPENSSL_ROOT_DIR=$(pwd)/openssl-1.1.1n/openssl"
            build_type: Release
            test: false
          - name: HttpsReq
            tar_name: wasmedge_httpsreq
            system: manylinux2014 aarch64
            host_runner: linux-arm64
            docker_tag: manylinux2014_aarch64
            output_path: plugins/wasmedge_httpsreq
            output_bin: libwasmedgePluginHttpsReq.so
            deps_path: "utils/wasmedge_httpsreq/build-openssl.sh"
            cmake_plugin_option: "-DWASMEDGE_PLUGIN_HTTPSREQ=ON -DOPENSSL_ROOT_DIR=$(pwd)/openssl-1.1.1n/openssl"
            build_type: Release
            test: false
          - name: Process
            tar_name: wasmedge_process
            system: manylinux2014 x86_64
            host_runner: ubuntu-latest
            docker_tag: manylinux2014_x86_64
            output_path: plugins/wasmedge_process
            output_bin: libwasmedgePluginWasmEdgeProcess.so
            cmake_plugin_option: "-DWASMEDGE_PLUGIN_PROCESS=ON"
            build_type: Release
            test: false
          - name: Process
            tar_name: wasmedge_process
            system: manylinux2014 aarch64
            host_runner: linux-arm64
            docker_tag: manylinux2014_aarch64
            output_path: plugins/wasmedge_process
            output_bin: libwasmedgePluginWasmEdgeProcess.so
            cmake_plugin_option: "-DWASMEDGE_PLUGIN_PROCESS=ON"
            build_type: Release
            test: false
    name: ${{ matrix.system }} WasmEdge ${{ matrix.name }} plugin with g++ ${{ matrix.build_type }}
    runs-on: ${{ matrix.host_runner }}
    needs: [get_version_v2]
    container:
      image: wasmedge/wasmedge:${{ matrix.docker_tag }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Build ${{ matrix.name }} dependency
        if: matrix.deps_path
        env:
          PYTORCH_VERSION: "1.8.2"
        run: |
          bash ${{ matrix.deps_path }}
      - name: Build ${{ matrix.name }} plugin
        shell: bash
        run: |
          if [[ "${{ matrix.name }}" == *"PyTorch"* ]]; then
            export Torch_DIR=$(pwd)/libtorch
          fi
          if ${{ matrix.test }}; then
            bash utils/docker/build-manylinux.sh --${{ matrix.build_type }} --not-build --not-ninja ${{ matrix.cmake_plugin_option }} -DWASMEDGE_BUILD_TESTS=ON
            cd build/${{ matrix.test_path }}
            make -j
          else
            bash utils/docker/build-manylinux.sh --${{ matrix.build_type }} --not-build --not-ninja ${{ matrix.cmake_plugin_option }}
            cd build/${{ matrix.output_path }}
            make -j
          fi
      - name: Test WasmEdge ${{ matrix.name }} plugin using ${{ matrix.compiler }} with ${{ matrix.build_type }} mode
        if: matrix.test
        run: |
          cd build/${{ matrix.test_path }}
          ./${{ matrix.test_bin }}
      - name: Prepare the WasmEdge ${{ matrix.name }} plugin tar.gz package
        run: |
          cp build/${{ matrix.output_path }}/${{ matrix.output_bin }} ${{ matrix.output_bin }}
          tar -zcvf plugin.tar.gz ${{ matrix.output_bin }}
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: WasmEdge-plugin-${{ matrix.tar_name }}-${{ needs.get_version_v2.outputs.version }}-${{ matrix.docker_tag }}.tar.gz
          path: plugin.tar.gz

  build_macos:
    strategy:
      matrix:
        include:
          - name: WASI-Crypto
            tar_name: wasi_crypto
            system: MacOS 11
            host_runner: macos-11
            darwin_version: darwin_20
            output_path: plugins/wasi_crypto
            output_bin: libwasmedgePluginWasiCrypto.dylib
            test_path: test/plugins/wasi_crypto
            test_bin: wasiCryptoTests
            build_type: Release
          - name: WASI-Crypto
            tar_name: wasi_crypto
            system: MacOS 12
            host_runner: macos-12
            darwin_version: darwin_21
            output_path: plugins/wasi_crypto
            output_bin: libwasmedgePluginWasiCrypto.dylib
            test_path: test/plugins/wasi_crypto
            test_bin: wasiCryptoTests
            build_type: Release
    name: ${{ matrix.system }} WasmEdge ${{ matrix.name }} plugin with clang++ ${{ matrix.build_type }}
    runs-on: ${{ matrix.host_runner }}
    needs: [get_version_v2]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Build WasmEdge ${{ matrix.name }} plugin using clang++ with ${{ matrix.build_type }} mode
        run: |
          brew install llvm@14 ninja boost cmake openssl@1.1
          export LLVM_DIR="/usr/local/opt/llvm@14/lib/cmake"
          export CC=clang
          export CXX=clang++
          mkdir -p build
          cd build
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DOPENSSL_ROOT_DIR=/usr/local/opt/openssl -DWASMEDGE_PLUGIN_WASI_CRYPTO=ON -DWASMEDGE_BUILD_TESTS=ON ..
          cd ${{ matrix.test_path }}
          make -j
      - name: Test WasmEdge ${{ matrix.name }} plugin using clang++ with ${{ matrix.build_type }} mode
        continue-on-error: true
        run: |
          cd build/${{ matrix.test_path }}
          ./${{ matrix.test_bin }}
      - name: Prepare the WasmEdge ${{ matrix.name }} plugin tar.gz package
        run: |
          cp build/${{ matrix.output_path }}/${{ matrix.output_bin }} ${{ matrix.output_bin }}
          tar -zcvf plugin.tar.gz ${{ matrix.output_bin }}
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: WasmEdge-plugin-${{ matrix.tar_name }}-${{ needs.get_version_v2.outputs.version }}-${{ matrix.darwin_version }}_x86_64.tar.gz
          path: plugin.tar.gz
