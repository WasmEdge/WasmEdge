name: Build and Test WasmEdge on multiple platforms

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

on:
  push:
    branches:
      - master
    paths:
      - ".github/workflows/build.yml"
      - "include/**"
      - "lib/**"
      - "plugins/**"
      - "examples/**"
      - "rpm/**"
      - "test/**"
      - "thirdparty/**"
      - "tools/**"
      - "CMakeLists.txt"
      - "cmake/**"
  pull_request:
    branches:
      - master
      - "proposal/**"
    paths:
      - ".github/workflows/build.yml"
      - "include/**"
      - "lib/**"
      - "plugins/**"
      - "examples/**"
      - "rpm/**"
      - "test/**"
      - "thirdparty/**"
      - "tools/**"
      - "CMakeLists.txt"
      - "cmake/**"

jobs:
  # TODO: Refactor `lint` with `on.workflow_run`
  # https://docs.github.com/en/actions/using-workflows/triggering-a-workflow
  lint:
    uses: ./.github/workflows/reusable-call-linter.yml

  get_version_v2:
    needs: lint
    name: Retrieve version information (v2)
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.prep.outputs.version }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Get version
        id: prep
        run: |
          # Retrieve annotated tags. Details: https://github.com/actions/checkout/issues/290
          git fetch --tags --force
          echo "Set version: $(git describe --match "[0-9].[0-9]*" --tag)"
          echo ::set-output name=version::$(git describe --match "[0-9].[0-9]*" --tag)

  create_source_tarball:
    needs: [get_version_v2, lint]
    uses: ./.github/workflows/reusable-create-source-tarball.yml
    with:
      version: ${{ needs.get_version_v2.outputs.version }}

  build_on_macos:
    needs: [get_version_v2, lint]
    uses: ./.github/workflows/reusable-build-on-macos.yml
    with:
      version: ${{ needs.get_version_v2.outputs.version }}
      matrix: "[{'name':'MacOS 11 (x86_64)','runner':'macos-11','darwin_version':20},{'name':'MacOS 12 (x86_64)','runner':'macos-12','darwin_version':21}]"

  build_on_manylinux_2014:
    needs: [get_version_v2, lint]
    uses: ./.github/workflows/reusable-build-on-manylinux.yml
    with:
      version: ${{ needs.get_version_v2.outputs.version }}
      matrix: "[{'runner':'ubuntu-latest','docker_tag':'manylinux2014_x86_64'},{'runner':'ARM64','docker_tag':'manylinux2014_aarch64'}]"

  build_on_windows:
    needs: [get_version_v2, lint]
    uses: ./.github/workflows/reusable-build-on-windows.yml
    with:
      version: ${{ needs.get_version_v2.outputs.version }}

  build_on_android:
    needs: [get_version_v2, lint]
    uses: ./.github/workflows/reusable-build-on-android.yml
    with:
      version: ${{ needs.get_version_v2.outputs.version }}

  build_on_fedora:
    needs: [get_version_v2, lint]
    uses: ./.github/workflows/reusable-build-on-fedora.yml
    with:
      version: ${{ needs.get_version_v2.outputs.version }}

  build_fedora_srpm:
    needs: [get_version_v2, create_source_tarball, lint]
    uses: ./.github/workflows/reusable-build-srpm.yml
    with:
      version: ${{ needs.get_version_v2.outputs.version }}

  build_coverage_check:
    needs: lint
    strategy:
      matrix:
        include:
          - name: g++ debug
            compiler: g++
            docker_tag: ubuntu-build-gcc
            build_type: Debug
            coverage: false
          - name: g++ release
            compiler: g++
            docker_tag: ubuntu-build-gcc
            build_type: Release
            coverage: false
          - name: clang++ debug
            compiler: clang++
            docker_tag: ubuntu-build-clang
            build_type: Debug
            coverage: false
          - name: clang++ release
            compiler: clang++
            docker_tag: ubuntu-build-clang
            build_type: Release
            coverage: false
          - name: g++ coverage
            compiler: g++
            docker_tag: ubuntu-build-gcc
            build_type: Debug
            coverage: true
    name: Build on Ubuntu with ${{ matrix.name }}
    runs-on: ubuntu-latest
    container:
      image: wasmedge/wasmedge:${{ matrix.docker_tag }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Build WasmEdge using ${{ matrix.compiler }} with ${{ matrix.build_type }} mode
        if: ${{ ! matrix.coverage }}
        env:
          CMAKE_BUILD_TYPE: ${{ matrix.build_type }}
        run: |
          git config --global --add safe.directory $(pwd)
          cmake -Bbuild -GNinja -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE -DWASMEDGE_BUILD_TESTS=ON .
          cmake --build build
      - name: Test WasmEdge
        if: ${{ ! matrix.coverage }}
        run: |
          export LD_LIBRARY_PATH="$(pwd)/build/lib/api:$LD_LIBRARY_PATH"
          cd build
          ./tools/wasmedge/wasmedge -v
          ctest
          cd -
      - name: Build WasmEdge using ${{ matrix.compiler }} with Coverage mode
        if: ${{ matrix.coverage }}
        run: |
          apt update
          apt install -y gcovr
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --target wasm32-wasi
          git config --global --add safe.directory $(pwd)
          cmake -Bbuild -GNinja -DCMAKE_BUILD_TYPE=Debug -DWASMEDGE_BUILD_TESTS=ON -DWASMEDGE_BUILD_COVERAGE=ON .
          cmake --build build
          LD_LIBRARY_PATH=$(pwd)/build/lib/api cmake --build build --target codecov
      - name: Create and upload coverage report to Codecov
        if: ${{ matrix.coverage }}
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./build/codecov.xml
          name: codecov-wasmedge
          fail_ci_if_error: true
          path_to_write_report: ./build/codecov_report.gz
