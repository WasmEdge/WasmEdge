name: Build and Test WasmEdge on multiple platforms

concurrency:
  group: build-${{ github.head_ref }}
  cancel-in-progress: true

on:
  push:
    branches:
      - master
    paths:
      - ".github/workflows/build.yml"
      - "include/**"
      - "lib/**"
      - "plugins/**"
      - "examples/**"
      - "rpm/**"
      - "test/**"
      - "thirdparty/**"
      - "tools/**"
      - "CMakeLists.txt"
      - "cmake/**"
  pull_request:
    branches:
      - master
      - 'proposal/**'
    paths:
      - ".github/workflows/build.yml"
      - "include/**"
      - "lib/**"
      - "plugins/**"
      - "examples/**"
      - "rpm/**"
      - "test/**"
      - "thirdparty/**"
      - "tools/**"
      - "CMakeLists.txt"
      - "cmake/**"

jobs:
  get_version_v2:
    name: Retrieve version information (v2)
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.prep.outputs.version }}
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Get version
      id: prep
      run: |
        # Retrieve annotated tags. Details: https://github.com/actions/checkout/issues/290
        git fetch --tags --force
        echo "Set version: $(git describe --match "[0-9].[0-9]*" --tag)"
        echo ::set-output name=version::$(git describe --match "[0-9].[0-9]*" --tag)

  build_windows:
    name: Windows Server 2022
    runs-on: windows-2022
    needs: get_version_v2
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Install dependency
      uses: crazy-max/ghaction-chocolatey@v1
      with:
        args: install cmake ninja vswhere
    - uses: GuillaumeFalourd/setup-windows10-sdk-action@v1
      with:
        sdk-version: 19041
    - name: Build WasmEdge with wasi-crypto
      run: |
        $vsPath = (vswhere -latest -property installationPath)
        Import-Module (Join-Path $vsPath "Common7\Tools\Microsoft.VisualStudio.DevShell.dll")
        Enter-VsDevShell -VsInstallPath $vsPath -SkipAutomaticLocation -DevCmdArguments "-arch=x64 -host_arch=x64 -winsdk=10.0.19041.0"
        $llvm = "LLVM-13.0.1-win64.zip"
        curl -sLO https://github.com/WasmEdge/llvm-windows/releases/download/llvmorg-13.0.1/LLVM-13.0.1-win64.zip -o $llvm
        Expand-Archive -Path $llvm
        $llvm_dir = "$pwd\\LLVM-13.0.1-win64\\LLVM-13.0.1-win64\\lib\\cmake\\llvm"
        $Env:CC = "clang-cl"
        $Env:CXX = "clang-cl"
        $cmake_sys_version = "10.0.19041.0"
        cmake -Bbuild -GNinja "-DCMAKE_SYSTEM_VERSION=$cmake_sys_version" -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreadedDLL "-DLLVM_DIR=$llvm_dir" -DWASMEDGE_BUILD_TESTS=ON -DWASMEDGE_BUILD_PACKAGE="ZIP" -DWASMEDGE_PLUGIN_WASI_CRYPTO=ON .
        cmake --build build
    - name: Test WasmEdge
      continue-on-error: true
      run: |
        $vsPath = (vswhere -latest -property installationPath)
        Import-Module (Join-Path $vsPath "Common7\Tools\Microsoft.VisualStudio.DevShell.dll")
        Enter-VsDevShell -VsInstallPath $vsPath -SkipAutomaticLocation -DevCmdArguments "-arch=x64 -host_arch=x64 -winsdk=10.0.19041.0"
        $Env:PATH += ";$pwd\\build\\lib\\api"
        cd build
        tools\wasmedge\wasmedge -v
        ctest
        cd -
    - name: Test WasmEdge Package
      run: |
        $vsPath = (vswhere -latest -property installationPath)
        Import-Module (Join-Path $vsPath "Common7\Tools\Microsoft.VisualStudio.DevShell.dll")
        Enter-VsDevShell -VsInstallPath $vsPath -SkipAutomaticLocation -DevCmdArguments "-arch=x64 -host_arch=x64 -winsdk=10.0.19041.0"
        cmake --build build --target package
    - name: Check artifact
      run: |
        Get-ChildItem -Path "$pwd\\build"
    - name: Upload artifact (v2)
      uses: actions/upload-artifact@v2
      with:
        name: WasmEdge-${{ needs.get_version_v2.outputs.version }}-windows.zip
        path: build\\WasmEdge-${{ needs.get_version_v2.outputs.version }}-Windows.zip
    - name: Package Windows Installer
      run: |
        $Env:product_version = ("${{ needs.get_version_v2.outputs.version }}").split("-")[0]
        . "$Env:WIX\bin\candle.exe" -arch x64 -o build\wasmedge.wixobj .github\scripts\wasmedge.wxs
        . "$Env:WIX\bin\light.exe" -out build\WasmEdge-$Env:product_version-windows.msi build\wasmedge.wixobj
        echo "product_version=$Env:product_version" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
    - name: Upload Windows Installer
      uses: actions/upload-artifact@v2
      with:
        name: WasmEdge-${{ env.product_version }}-windows.msi
        path: build\\WasmEdge-${{ env.product_version }}-windows.msi
