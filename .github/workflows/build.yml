name: build

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build_test_gcc_debug:
    runs-on: ubuntu-latest
    container:
      image: secondstate/ssvm:ubuntu-build-gcc

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Build SSVM using gcc with Debug mode
      run: |
        if ! command ninja; then
          apt update
          apt install -y ninja-build
        fi
        cmake -Bbuild -GNinja -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTS=ON .
        cmake --build build

    - name: Test SSVM
      run: |
        LD_LIBRARY_PATH=$(pwd)/build/lib/api cmake --build build --target test

  build_test_gcc_release:
    runs-on: ubuntu-latest
    container:
      image: secondstate/ssvm:ubuntu-build-gcc

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Build SSVM using gcc with Release mode
      run: |
        if ! command ninja; then
          apt update
          apt install -y ninja-build
        fi
        cmake -Bbuild -GNinja -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=ON .
        cmake --build build

    - name: Test SSVM
      run: |
        LD_LIBRARY_PATH=$(pwd)/build/lib/api cmake --build build --target test

  build_test_clang_debug:
    runs-on: ubuntu-latest
    container:
      image: secondstate/ssvm:ubuntu-build-clang

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Build SSVM using clang with Debug mode
      run: |
        if ! command ninja; then
          apt update
          apt install -y ninja-build
        fi
        cmake -Bbuild -GNinja -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTS=ON .
        cmake --build build

    - name: Test SSVM
      run: |
        LD_LIBRARY_PATH=$(pwd)/build/lib/api cmake --build build --target test

  build_test_clang_release:
    runs-on: ubuntu-latest
    container:
      image: secondstate/ssvm:ubuntu-build-clang

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Build SSVM using clang with Release mode
      run: |
        if ! command ninja; then
          apt update
          apt install -y ninja-build
        fi
        cmake -Bbuild -GNinja -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=ON .
        cmake --build build

    - name: Test SSVM
      run: |
        LD_LIBRARY_PATH=$(pwd)/build/lib/api cmake --build build --target test

  build_test_gcc_debug_coverage:
    runs-on: ubuntu-latest
    container:
      image: secondstate/ssvm:ubuntu-build-gcc

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Install gcovr
      run: |
        apt update
        apt install -y gcovr ninja-build

    - name: Build SSVM using gcc with Debug mode
      run: |
        cmake -Bbuild -GNinja -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTS=ON -DBUILD_COVERAGE=ON .
        cmake --build build

    - name: Generate coverage report
      run: |
        LD_LIBRARY_PATH=$(pwd)/build/lib/api cmake --build build --target codecov

    - name: Upload coverage report to Codecov
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./build/codecov.xml
        name: codecov-ssvm
        fail_ci_if_error: true
        path_to_write_report: ./build/codecov_report.gz
