name: build

concurrency:
  group: build-${{ github.head_ref }}
  cancel-in-progress: true

on:
  push:
    branches:
      - master
    paths-ignore:
      - 'docs/**'
      - '*.md'
  pull_request:
    branches:
      - master
    paths-ignore:
      - 'docs/**'
      - '*.md'

jobs:
  build_ubuntu:
    strategy:
      matrix:
        include:
          - name: g++ debug
            compiler: g++
            docker_tag: ubuntu-build-gcc
            build_type: Debug
            coverage: false
          - name: g++ release
            compiler: g++
            docker_tag: ubuntu-build-gcc
            build_type: Release
            coverage: false
          - name: clang++ debug
            compiler: clang++
            docker_tag: ubuntu-build-clang
            build_type: Debug
            coverage: false
          - name: clang++ release
            compiler: clang++
            docker_tag: ubuntu-build-clang
            build_type: Release
            coverage: false
          - name: g++ coverage
            compiler: g++
            docker_tag: ubuntu-build-gcc
            build_type: Debug
            coverage: true
    name: Build WasmEdge on Ubuntu 20.04 with ${{ matrix.name }}
    runs-on: ubuntu-latest
    container:
      image: wasmedge/wasmedge:${{ matrix.docker_tag }}

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Build WasmEdge using ${{ matrix.compiler }} with ${{ matrix.build_type }} mode
      if: ${{ ! matrix.coverage }}
      env:
        CMAKE_BUILD_TYPE: ${{ matrix.build_type }}
      run: |
        cmake -Bbuild -GNinja -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE -DWASMEDGE_BUILD_TESTS=ON .
        cmake --build build
    - name: Test WasmEdge
      if: ${{ ! matrix.coverage }}
      run: |
        LD_LIBRARY_PATH=$(pwd)/build/lib/api cmake --build build --target test

    - name: Build WasmEdge using ${{ matrix.compiler }} with Coverage mode
      if: ${{ matrix.coverage }}
      run: |
        apt update
        apt install -y gcovr
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --target wasm32-wasi
        cmake -Bbuild -GNinja -DCMAKE_BUILD_TYPE=Debug -DWASMEDGE_BUILD_TESTS=ON -DWASMEDGE_BUILD_COVERAGE=ON .
        cmake --build build
        LD_LIBRARY_PATH=$(pwd)/build/lib/api cmake --build build --target codecov
    - name: Create and upload coverage report to Codecov
      if: ${{ matrix.coverage }}
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./build/codecov.xml
        name: codecov-wasmedge
        fail_ci_if_error: true
        path_to_write_report: ./build/codecov_report.gz

  build_ubuntu_legacy:
    strategy:
      matrix:
        include:
          - name: 20.04
            docker_tag: ubuntu2004_x86_64
    name: Build WasmEdge on Ubuntu ${{ matrix.name }}
    runs-on: ubuntu-latest
    container:
      image: wasmedge/wasmedge:${{ matrix.docker_tag }}

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Build and test WasmEdge
      run: |
        bash utils/docker/test-ubuntu.sh

  build_manylinux:
    strategy:
      matrix:
        include:
          - name: manylinux2014 x86_64
            host_runner: ubuntu-latest
            docker_tag: manylinux2014_x86_64
            checkout_version: v2
          - name: manylinux2010 x86_64
            host_runner: ubuntu-latest
            docker_tag: manylinux2010_x86_64
            checkout_version: v1
          - name: manylinux1 x86_64
            host_runner: ubuntu-latest
            docker_tag: manylinux1_x86_64
            checkout_version: v1
          - name: manylinux2014 aarch64
            host_runner: ARM64
            docker_tag: manylinux2014_aarch64
            checkout_version: v2
    name: Build WasmEdge on ${{ matrix.name }} platform
    runs-on: ${{ matrix.host_runner }}
    container:
      image: wasmedge/wasmedge:${{ matrix.docker_tag }}
    steps:
    - uses: actions/checkout@v1
      if: ${{ matrix.checkout_version == 'v1' }}
      with:
        fetch-depth: 0

    - uses: actions/checkout@v2
      if: ${{ matrix.checkout_version == 'v2' }}
      with:
        fetch-depth: 0

    - name: Build ${{ matrix.name }} package
      run: |
        bash utils/docker/build-manylinux.sh
