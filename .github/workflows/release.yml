name: release

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: "Log level"
        required: true
        default: "info"
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+*"

jobs:
  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    container:
      image: wasmedge/wasmedge:ubuntu-build-gcc
    outputs:
      version: ${{ steps.prep.outputs.version }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Get version
        id: prep
        run: |
          # Retrieve annotated tags. Details: https://github.com/actions/checkout/issues/290
          git config --global --add safe.directory $(pwd)
          git fetch --tags --force
          echo ::set-output name=version::$(git describe --match "[0-9].[0-9]*" --tag)
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: WasmEdge ${{ steps.prep.outputs.version }}
          body_path: .CurrentChangelog.md
          draft: true
          prerelease: true

  create_source_tarball:
    needs: create_release
    uses: ./.github/workflows/reusable-create-source-tarball.yml
    with:
      version: ${{ needs.create_release.outputs.version }}
      release: true
      upload_asset_url: ${{ needs.create_release.outputs.upload_url }}
    secrets: inherit

  build_on_macos:
    needs: create_release
    uses: ./.github/workflows/reusable-build-on-macos.yml
    with:
      version: ${{ needs.create_release.outputs.version }}
      matrix: "[{'name':'MacOS 11 (x86_64)','runner':'macos-11','darwin_version':20}]"
      release: true
      upload_asset_url: ${{ needs.create_release.outputs.upload_url }}
    secrets: inherit

  build_on_ubuntu_20_04:
    needs: create_release
    uses: ./.github/workflows/reusable-build-on-ubuntu.yml
    with:
      version: ${{ needs.create_release.outputs.version }}
      matrix: "[{'name':'ubuntu-20.04','compiler':'clang++','build_type':'Release','docker_tag':'ubuntu-build-clang'}]"
      release: true
      upload_asset_url: ${{ needs.create_release.outputs.upload_url }}
    secrets: inherit

  build_on_manylinux2014:
    needs: create_release
    uses: ./.github/workflows/reusable-build-on-manylinux.yml
    with:
      version: ${{ needs.create_release.outputs.version }}
      matrix: "[{'name':'manylinux 2014 x86_64','runner':'ubuntu-latest','docker_tag':'manylinux2014_x86_64'},
                {'name':'manylinux 2014 aarch64','runner':'linux-arm64','docker_tag':'manylinux2014_aarch64'}]"
      release: true
      upload_asset_url: ${{ needs.create_release.outputs.upload_url }}
    secrets: inherit

  build_on_windows:
    needs: create_release
    uses: ./.github/workflows/reusable-build-on-windows.yml
    with:
      version: ${{ needs.create_release.outputs.version }}
      release: true
      upload_asset_url: ${{ needs.create_release.outputs.upload_url }}
    secrets: inherit

  build_on_android:
    needs: create_release
    uses: ./.github/workflows/reusable-build-on-android.yml
    with:
      version: ${{ needs.create_release.outputs.version }}
      release: true
      upload_asset_url: ${{ needs.create_release.outputs.upload_url }}
    secrets: inherit

  build_fedora_srpm:
    needs: [create_release, create_source_tarball]
    uses: ./.github/workflows/reusable-build-srpm.yml
    with:
      version: ${{ needs.create_release.outputs.version }}
      release: true
      upload_asset_url: ${{ needs.create_release.outputs.upload_url }}
    secrets: inherit

  build_and_upload_plugin_ubuntu:
    strategy:
      matrix:
        include:
          - name: WASI-NN OpenVINO
            backend: OpenVINO
            output_path: plugins/wasi_nn
            output_bin: libwasmedgePluginWasiNN.so
            tar_name: wasi_nn-openvino
          - name: WASI-NN PyTorch
            backend: PyTorch
            output_path: plugins/wasi_nn
            output_bin: libwasmedgePluginWasiNN.so
            tar_name: wasi_nn-pytorch
          - name: WASI-NN TensorFlowLite
            backend: TensorFlowLite
            output_path: plugins/wasi_nn
            output_bin: libwasmedgePluginWasiNN.so
            tar_name: wasi_nn-tensorflowlite
          - name: WASI-Crypto
            output_path: plugins/wasi_crypto
            output_bin: libwasmedgePluginWasiCrypto.so
            tar_name: wasi_crypto
          - name: WasmEdge-HttpsReq
            output_path: plugins/wasmedge_httpsreq
            output_bin: libwasmedgePluginHttpsReq.so
            tar_name: wasmedge_httpsreq
          - name: WasmEdge-Process
            output_path: plugins/wasmedge_process
            output_bin: libwasmedgePluginWasmEdgeProcess.so
            tar_name: wasmedge_process
    name: Build and upload WasmEdge ${{ matrix.name }} plugin on Ubuntu 20.04
    needs: create_release
    runs-on: ubuntu-latest
    container:
      image: wasmedge/wasmedge:latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Build WasmEdge WASI-NN ${{ matrix.backend }} plugin
        shell: bash
        if: contains(matrix.name, 'WASI-NN')
        env:
          OPENVINO_VERSION: "2021.4.582"
          OPENVINO_YEAR: "2021"
          PYTORCH_VERSION: "1.8.2"
          PYTORCH_INSTALL_TO: "build"
        run: |
          mkdir -p build
          if [[ "${{ matrix.name }}" == *"OpenVINO"* ]]; then
            bash utils/wasi-nn/install-openvino.sh
            source /opt/intel/openvino_2021/bin/setupvars.sh
            ldconfig
          fi
          if [[ "${{ matrix.name }}" == *"PyTorch"* ]]; then
            apt update
            apt install unzip
            bash utils/wasi-nn/install-pytorch.sh
            export Torch_DIR=$(pwd)/${PYTORCH_INSTALL_TO}/libtorch
            export LD_LIBRARY_PATH=$Torch_DIR/lib:$LD_LIBRARY_PATH
          fi
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DWASMEDGE_PLUGIN_WASI_NN_BACKEND="${{ matrix.backend }}" ..
          cd ${{ matrix.output_path }}
          make -j
      - name: Build WasmEdge WASI-Crypto plugin
        if: contains(matrix.name, 'WASI-Crypto')
        run: |
          apt update
          apt install -y libssl-dev
          mkdir -p build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DWASMEDGE_PLUGIN_WASI_CRYPTO=On ..
          cd ${{ matrix.output_path }}
          make -j
      - name: Build WasmEdge-HttpsReq plugin
        if: contains(matrix.name, 'WasmEdge-HttpsReq')
        run: |
          apt update
          apt install -y libssl-dev
          mkdir -p build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DWASMEDGE_PLUGIN_HTTPSREQ=On ..
          cd ${{ matrix.output_path }}
          make -j
      - name: Build WasmEdge-Process plugin
        if: contains(matrix.name, 'WasmEdge-Process')
        run: |
          mkdir -p build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DWASMEDGE_PLUGIN_PROCESS=On ..
          cd ${{ matrix.output_path }}
          make -j
      - name: Prepare the WasmEdge ${{ matrix.name }} plugin tar.gz package
        run: |
          cp build/${{ matrix.output_path }}/${{ matrix.output_bin }} ${{ matrix.output_bin }}
          tar -zcvf plugin.tar.gz ${{ matrix.output_bin }}
      - name: Upload WasmEdge ${{ matrix.name }} plugin tar.gz package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: plugin.tar.gz
          asset_name: WasmEdge-plugin-${{ matrix.tar_name }}-${{ needs.create_release.outputs.version }}-ubuntu20.04_x86_64.tar.gz
          asset_content_type: application/x-gzip

  build_and_upload_plugin_manylinux:
    strategy:
      matrix:
        include:
          - name: WasmEdge-HttpsReq
            docker_tag: manylinux2014_x86_64
            output_path: plugins/wasmedge_httpsreq
            output_bin: libwasmedgePluginHttpsReq.so
            deps_path: "utils/wasmedge_httpsreq/build-openssl.sh"
            cmake_plugin_option: "-DWASMEDGE_PLUGIN_HTTPSREQ=ON -DOPENSSL_ROOT_DIR=$(pwd)/openssl-1.1.1n/openssl"
            tar_name: wasmedge_httpsreq
            host_runner: ubuntu-latest
          - name: WasmEdge-HttpsReq
            docker_tag: manylinux2014_aarch64
            output_path: plugins/wasmedge_httpsreq
            output_bin: libwasmedgePluginHttpsReq.so
            deps_path: "utils/wasmedge_httpsreq/build-openssl.sh"
            cmake_plugin_option: "-DWASMEDGE_PLUGIN_HTTPSREQ=ON -DOPENSSL_ROOT_DIR=$(pwd)/openssl-1.1.1n/openssl"
            tar_name: wasmedge_httpsreq
            host_runner: linux-arm64
          - name: WasmEdge-Process
            docker_tag: manylinux2014_x86_64
            output_path: plugins/wasmedge_process
            output_bin: libwasmedgePluginWasmEdgeProcess.so
            cmake_plugin_option: "-DWASMEDGE_PLUGIN_PROCESS=ON"
            tar_name: wasmedge_process
            host_runner: ubuntu-latest
          - name: WasmEdge-Process
            docker_tag: manylinux2014_aarch64
            output_path: plugins/wasmedge_process
            output_bin: libwasmedgePluginWasmEdgeProcess.so
            cmake_plugin_option: "-DWASMEDGE_PLUGIN_PROCESS=ON"
            tar_name: wasmedge_process
            host_runner: linux-arm64
          - name: WASI-NN PyTorch
            docker_tag: manylinux2014_x86_64
            output_path: plugins/wasi_nn
            output_bin: libwasmedgePluginWasiNN.so
            deps_path: "utils/wasi-nn/install-pytorch.sh --disable-cxx11-abi"
            cmake_plugin_option: "-DWASMEDGE_PLUGIN_WASI_NN_BACKEND=PyTorch"
            tar_name: wasi_nn-pytorch
            host_runner: ubuntu-latest
          - name: WASI-NN TensorflowLite
            docker_tag: manylinux2014_x86_64
            output_path: plugins/wasi_nn
            output_bin: libwasmedgePluginWasiNN.so
            cmake_plugin_option: "-DWASMEDGE_PLUGIN_WASI_NN_BACKEND=TensorflowLite"
            tar_name: wasi_nn-tensorflowlite
            host_runner: ubuntu-latest
          - name: WASI-NN TensorflowLite
            docker_tag: manylinux2014_aarch64
            output_path: plugins/wasi_nn
            output_bin: libwasmedgePluginWasiNN.so
            cmake_plugin_option: "-DWASMEDGE_PLUGIN_WASI_NN_BACKEND=TensorflowLite"
            tar_name: wasi_nn-tensorflowlite
            host_runner: linux-arm64
          - name: WASI-Crypto
            docker_tag: manylinux2014_x86_64
            output_path: plugins/wasi_crypto
            output_bin: libwasmedgePluginWasiCrypto.so
            deps_path: "utils/wasi-crypto/build-openssl.sh"
            cmake_plugin_option: "-DWASMEDGE_PLUGIN_WASI_CRYPTO=ON -DOPENSSL_ROOT_DIR=$(pwd)/openssl-1.1.1n/openssl"
            tar_name: wasi_crypto
            host_runner: ubuntu-latest
          - name: WASI-Crypto
            docker_tag: manylinux2014_aarch64
            output_path: plugins/wasi_crypto
            output_bin: libwasmedgePluginWasiCrypto.so
            deps_path: "utils/wasi-crypto/build-openssl.sh"
            cmake_plugin_option: "-DWASMEDGE_PLUGIN_WASI_CRYPTO=ON -DOPENSSL_ROOT_DIR=$(pwd)/openssl-1.1.1n/openssl"
            tar_name: wasi_crypto
            host_runner: linux-arm64
    name: Build and upload WasmEdge ${{ matrix.name }} plugin on ${{ matrix.docker_tag }}
    needs: create_release
    runs-on: ${{ matrix.host_runner }}
    container:
      image: wasmedge/wasmedge:${{ matrix.docker_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Build ${{ matrix.name }} dependency
        if: matrix.deps_path
        run: |
          bash ${{ matrix.deps_path }}
      - name: Build ${{ matrix.name }} plugin
        run: |
          if [[ "${{ matrix.name }}" == *"PyTorch"* ]]; then
            export Torch_DIR=$(pwd)/libtorch
          fi
          bash utils/docker/build-manylinux.sh --not-build --not-ninja ${{ matrix.cmake_plugin_option }}
          cd build
          cd ${{ matrix.output_path }}
          make -j
      - name: Prepare the WasmEdge ${{ matrix.name }} plugin tar.gz package
        run: |
          cp build/${{ matrix.output_path }}/${{ matrix.output_bin }} ${{ matrix.output_bin }}
          tar -zcvf plugin.tar.gz ${{ matrix.output_bin }}
      - name: Upload WasmEdge ${{ matrix.name }} plugin tar.gz package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: plugin.tar.gz
          asset_name: WasmEdge-plugin-${{ matrix.tar_name }}-${{ needs.create_release.outputs.version }}-${{ matrix.docker_tag }}.tar.gz
          asset_content_type: application/x-gzip

  build_manylinux2014_runtime_only:
    name: Build runtime only on manylinux2014 platform
    needs: create_release
    runs-on: ubuntu-latest
    container:
      image: wasmedge/wasmedge:manylinux2014_x86_64
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Build runtime only manylinux2014 package
        run: |
          bash utils/docker/build-manylinux.sh -DWASMEDGE_BUILD_AOT_RUNTIME=OFF
      - name: Upload ${{ matrix.name }} tar.gz package to artifact
        uses: actions/upload-artifact@v3
        with:
          name: build_manylinux2014_runtime_only
          path: build/WasmEdge-${{ needs.create_release.outputs.version }}-Linux.tar.gz

  build_docker_slim_images:
    strategy:
      matrix:
        include:
          - name: wasmedge/slim:${{ needs.create_release.outputs.version }}
            artifact_name: WasmEdge-${{ needs.create_release.outputs.version }}-manylinux2014_x86_64.tar.gz
            include_bin: "--include-bin /usr/local/bin/wasmedge --include-bin /usr/local/bin/wasmedgec"
          - name: wasmedge/slim-runtime:${{ needs.create_release.outputs.version }}
            artifact_name: build_manylinux2014_runtime_only
            include_bin: "--include-bin /usr/local/bin/wasmedge"
    name: Build DockerSlim Images
    needs:
      [create_release, build_on_manylinux2014, build_manylinux2014_runtime_only]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Prepare tarball
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.artifact_name }}
          path: utils/docker
      - name: Install requirements
        run: |
          curl -sL https://raw.githubusercontent.com/slimtoolkit/slim/master/scripts/install-slim.sh | sudo -E bash -
      - name: Prepare docker env
        id: docker_env
        run: |
          echo ::set-output name=docker_image::${{ matrix.name }}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}
      - name: Run slim
        run: |
          slim build \
            --dockerfile Dockerfile.release \
            --dockerfile-context utils/docker \
            --tag ${{ steps.docker_env.outputs.docker_image }} \
            --http-probe-off \
            --include-bin /usr/lib/x86_64-linux-gnu/libnss_compat.so.2 \
            --include-bin /usr/lib/x86_64-linux-gnu/libnss_dns.so.2 \
            --include-bin /usr/lib/x86_64-linux-gnu/libnss_files.so.2 \
            --include-bin /usr/lib/x86_64-linux-gnu/libresolv.so.2 \
            --include-path /etc/services \
            ${{ matrix.include_bin }} \
            --cbo-build-arg VERSION="${{ needs.create_release.outputs.version }}" \
            --cbo-label org.opencontainers.image.title="${{ github.event.repository.name }}" \
            --cbo-label org.opencontainers.image.description="${{ github.event.repository.description }}" \
            --cbo-label org.opencontainers.image.url="${{ github.event.repository.html_url }}" \
            --cbo-label org.opencontainers.image.source="${{ github.event.repository.clone_url }}" \
            --cbo-label org.opencontainers.image.version="${{ needs.create_release.outputs.version }}" \
            --cbo-label org.opencontainers.image.created="${{ steps.docker_env.outputs.created }}" \
            --cbo-label org.opencontainers.image.revision="${{ github.sha }}" \
            --cbo-label org.opencontainers.image.licenses="${{ github.event.repository.license.spdx_id }}"
      - name: Push to DockerHub
        run: |
          docker push ${{ steps.docker_env.outputs.docker_image }}
