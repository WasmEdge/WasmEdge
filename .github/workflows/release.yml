name: release

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: "Log level"
        required: true
        default: "info"
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+*"

permissions:
  contents: read

jobs:
  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      version: ${{ steps.prep.outputs.version }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - name: Ensure git safe directory
        run: |
          git config --global --add safe.directory $(pwd)
      - name: Get version
        id: prep
        run: |
          echo "version=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT
      - name: Create Release
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ steps.prep.outputs.version }} --draft  --notes-file .CurrentChangelog.md --prerelease --title "WasmEdge ${{ steps.prep.outputs.version }}" --verify-tag

  create_source_tarball:
    needs: create_release
    permissions:
      contents: write
    uses: ./.github/workflows/reusable-create-source-tarball.yml
    with:
      version: ${{ needs.create_release.outputs.version }}
      release: true
    secrets: inherit

  build_on_macos:
    needs: create_release
    uses: ./.github/workflows/reusable-build-on-macos.yml
    permissions:
      contents: write
    with:
      version: ${{ needs.create_release.outputs.version }}
      matrix:
        "[{'name':'MacOS 13 (x86_64)','runner':'macos-13','darwin_version':22,'arch':'x86_64'},
        {'name':'MacOS 14 (arm64)','runner':'macos-14','darwin_version':23,'arch':'arm64'}]"
      release: true
    secrets: inherit

  build_on_ubuntu_20_04:
    needs: create_release
    uses: ./.github/workflows/reusable-build-on-ubuntu.yml
    permissions:
      contents: write
    with:
      version: ${{ needs.create_release.outputs.version }}
      matrix: "[{'name':'ubuntu-20.04','arch':'x86_64','runner':'ubuntu-latest','compiler':'clang++','build_type':'Release','docker_tag':'ubuntu-20.04-build-clang'},
                {'name':'ubuntu-20.04','arch':'aarch64','runner':'ubuntu-24.04-arm','compiler':'clang++','build_type':'Release','docker_tag':'ubuntu-20.04-build-clang-aarch64'}]"
      release: true
    secrets: inherit

  build_on_manylinux_2_28:
    needs: create_release
    uses: ./.github/workflows/reusable-build-on-manylinux.yml
    permissions:
      contents: write
    with:
      version: ${{ needs.create_release.outputs.version }}
      matrix:
        "[{'name':'manylinux_2_28 x86_64','runner':'ubuntu-latest','docker_tag':'manylinux_2_28_x86_64','asset_tag':'manylinux_2_28_x86_64'},
          {'name':'manylinux_2_28 aarch64','runner':'ubuntu-24.04-arm','docker_tag':'manylinux_2_28_aarch64','asset_tag':'manylinux_2_28_aarch64'}]"
      release: true
    secrets: inherit

  build_on_debian_static:
    needs: create_release
    uses: ./.github/workflows/reusable-build-on-debian-static.yml
    permissions:
      contents: write
    with:
      version: ${{ needs.create_release.outputs.version }}
      release: true
    secrets: inherit

  build_on_alpine_static:
    needs: create_release
    uses: ./.github/workflows/reusable-build-on-alpine-static.yml
    permissions:
      contents: write
    with:
      version: ${{ needs.create_release.outputs.version }}
      release: true
    secrets: inherit

  build_on_windows:
    needs: create_release
    uses: ./.github/workflows/reusable-build-on-windows.yml
    permissions:
      contents: write
    with:
      version: ${{ needs.create_release.outputs.version }}
      release: true
    secrets: inherit

  build_on_windows_msvc:
    needs: create_release
    uses: ./.github/workflows/reusable-build-on-windows-msvc.yml
    permissions:
      contents: write
    with:
      version: ${{ needs.create_release.outputs.version }}
      release: true
    secrets: inherit

  build_on_android:
    needs: create_release
    uses: ./.github/workflows/reusable-build-on-android.yml
    permissions:
      contents: write
    with:
      version: ${{ needs.create_release.outputs.version }}
      release: true
    secrets: inherit

  build_and_upload_plugins:
    name: Build and Upload
    needs: create_release
    uses: ./.github/workflows/reusable-build-extensions.yml
    permissions:
      contents: write
    with:
      version: ${{ needs.create_release.outputs.version }}
      release: true
    secrets: inherit

  generate_sbom:
    name: Generate SBOM
    runs-on: ubuntu-latest
    needs: create_release
    permissions:
      contents: write
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Grant the safe directory for git
        run: |
          git config --global --add safe.directory $(pwd)

      - name: Generate SBOM
        id: generate_sbom
        run: |
          echo "Generating SBOM for repository: $GITHUB_REPOSITORY"

          curl --retry 5 \
            --retry-delay 2 \
            --retry-connrefused \
            -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${GITHUB_TOKEN}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/${GITHUB_REPOSITORY}/dependency-graph/sbom" \
            -o sbom.json

          if [ ! -s sbom.json ]; then
            echo "Error: Failed to generate SBOM or received empty response"
            exit 1
          fi

          if ! jq empty sbom.json 2>/dev/null; then
            echo "Error: Generated SBOM is not valid JSON"
            cat sbom.json
            exit 1
          fi

          echo "SBOM generated successfully"
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

      - name: Create SBOM tarball and upload to release
        shell: bash
        run: |
          SBOM_FILENAME="sbom_${VERSION}.json"
          mv sbom.json "$SBOM_FILENAME"
          tar -zcvf sbom.tar.gz "$SBOM_FILENAME"
          gh release upload $VERSION sbom.tar.gz --clobber
          echo "SBOM uploaded to release as sbom.tar.gz"
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
          VERSION: ${{needs.create_release.outputs.version}}
