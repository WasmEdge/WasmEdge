name: release

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: "Log level"
        required: true
        default: "info"
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+*"

jobs:
  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.prep.outputs.version }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Ensure git safe directory
        run: |
          git config --global --add safe.directory $(pwd)
      - name: Get version
        id: prep
        run: |
          echo "version=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT
      - name: Create Release
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ steps.prep.outputs.version }} --draft  --notes-file .CurrentChangelog.md --prerelease --title "WasmEdge ${{ steps.prep.outputs.version }}" --verify-tag

  create_source_tarball:
    needs: create_release
    uses: ./.github/workflows/reusable-create-source-tarball.yml
    with:
      version: ${{ needs.create_release.outputs.version }}
      release: true
    secrets: inherit

  build_on_macos:
    needs: create_release
    uses: ./.github/workflows/reusable-build-on-macos.yml
    with:
      version: ${{ needs.create_release.outputs.version }}
      matrix:
        "[{'name':'MacOS 12 (x86_64)','runner':'macos-12','darwin_version':21,'arch':'x86_64'},
        {'name':'MacOS 14 (arm64)','runner':'macos-14','darwin_version':23,'arch':'arm64'}]"
      release: true
    secrets: inherit

  build_on_ubuntu_20_04:
    needs: create_release
    uses: ./.github/workflows/reusable-build-on-ubuntu.yml
    with:
      version: ${{ needs.create_release.outputs.version }}
      matrix: "[{'name':'ubuntu-20.04','arch':'x86_64','runner':'ubuntu-latest','compiler':'clang++','build_type':'Release','docker_tag':'ubuntu-20.04-build-clang'},
                {'name':'ubuntu-20.04','arch':'aarch64','runner':'linux-arm64-v2','compiler':'clang++','build_type':'Release','docker_tag':'ubuntu-20.04-build-clang-aarch64'}]"
      release: true
    secrets: inherit

  build_on_manylinux_2_28:
    needs: create_release
    uses: ./.github/workflows/reusable-build-on-manylinux.yml
    with:
      version: ${{ needs.create_release.outputs.version }}
      matrix:
        "[{'name':'manylinux_2_28 x86_64','runner':'ubuntu-latest','docker_tag':'manylinux_2_28_x86_64','asset_tag':'manylinux_2_28_x86_64'},
          {'name':'manylinux_2_28 aarch64','runner':'linux-arm64-v2','docker_tag':'manylinux_2_28_aarch64','asset_tag':'manylinux_2_28_aarch64'}]"
      release: true
    secrets: inherit

  build_on_debian_static:
    needs: create_release
    uses: ./.github/workflows/reusable-build-on-debian-static.yml
    with:
      version: ${{ needs.create_release.outputs.version }}
      release: true
    secrets: inherit

  build_on_alpine_static:
    needs: create_release
    uses: ./.github/workflows/reusable-build-on-alpine-static.yml
    with:
      version: ${{ needs.create_release.outputs.version }}
      release: true
    secrets: inherit

  build_on_windows:
    needs: create_release
    uses: ./.github/workflows/reusable-build-on-windows.yml
    with:
      version: ${{ needs.create_release.outputs.version }}
      release: true
    secrets: inherit

  build_on_windows_msvc:
    needs: create_release
    uses: ./.github/workflows/reusable-build-on-windows-msvc.yml
    with:
      version: ${{ needs.create_release.outputs.version }}
      release: true
    secrets: inherit

  build_on_android:
    needs: create_release
    uses: ./.github/workflows/reusable-build-on-android.yml
    with:
      version: ${{ needs.create_release.outputs.version }}
      release: true
    secrets: inherit

  build_and_upload_wasinn_ubuntu:
    name: Build and upload WASI-NN on Ubuntu 20.04
    runs-on: ubuntu-latest
    env:
      output_dir: build/plugins/wasi_nn
      build_options: -DWASMEDGE_PLUGIN_WASI_NN_BACKEND=PyTorch -DWASMEDGE_PLUGIN_WASI_NN_BACKEND=OpenVINO -DWASMEDGE_PLUGIN_WASI_NN_BACKEND=TensorFlowLite -DWASMEDGE_PLUGIN_WASI_NN_BACKEND=GGML -DWASMEDGE_PLUGIN_WASI_NN_BACKEND=Whisper -DWASMEDGE_PLUGIN_WASI_NN_BACKEND=Piper
      tar_names: wasi_nn-pytorch wasi_nn-openvino wasi_nn-tensorflowlite wasi_nn-ggml wasi_nn-whisper wasi_nn-piper
      output_bin: libwasmedgePluginWasiNN.so
      OPENVINO_VERSION: "2024.2.0"
      OPENVINO_YEAR: "2024"
      PYTORCH_VERSION: "1.8.2"
      PYTORCH_INSTALL_TO: "."
    needs: create_release
    container:
      image: wasmedge/wasmedge:ubuntu-20.04-build-clang
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Grant the safe directory for git
        run: |
          git config --global --add safe.directory $(pwd)
      - name: Install dependencies
        shell: bash
        run: |
          apt update
          apt install -y unzip libopenblas-dev pkg-config python3-dev
          bash utils/wasi-nn/install-openvino.sh
          bash utils/wasi-nn/install-pytorch.sh
          bash utils/wasi-nn/install-onnxruntime.sh
      - name: Build WASI-NN plugin
        shell: bash
        run: |
          export Torch_DIR=$(pwd)/${PYTORCH_INSTALL_TO}/libtorch
          ldconfig
          plugin_array=(${tar_names})
          option_array=(${build_options})
          outtarget=${output_bin%.*}
          outtarget=${outtarget#lib}
          cmake -Bbuild -GNinja -DCMAKE_BUILD_TYPE=Release -DWASMEDGE_USE_LLVM=OFF -DWASMEDGE_BUILD_TOOLS=OFF
          for (( i=0; i<${#plugin_array[@]}; i++ ));
          do
            echo "Building ${plugin_array[$i]} backend:"
            cmake -Bbuild -GNinja ${option_array[$i]}
            cmake --build build --target ${outtarget}

            echo "Copying ${plugin_array[$i]} backend:"
            cp -f ${output_dir}/${output_bin} ${output_bin}
            tar -zcvf plugin_${plugin_array[$i]}.tar.gz ${output_bin}
          done
      - name: Install gh
        run: |
          type -p curl >/dev/null || (apt update && apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && apt update \
          && apt install gh -y
      - name: Upload wasi_nn-pytorch plugin tar.gz package
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mv plugin_wasi_nn-pytorch.tar.gz WasmEdge-plugin-wasi_nn-pytorch-${{ needs.create_release.outputs.version }}-ubuntu20.04_x86_64.tar.gz
          gh release upload ${{ needs.create_release.outputs.version }} WasmEdge-plugin-wasi_nn-pytorch-${{ needs.create_release.outputs.version }}-ubuntu20.04_x86_64.tar.gz --clobber
      - name: Upload wasi_nn-openvino plugin tar.gz package
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mv plugin_wasi_nn-openvino.tar.gz WasmEdge-plugin-wasi_nn-openvino-${{ needs.create_release.outputs.version }}-ubuntu20.04_x86_64.tar.gz
          gh release upload ${{ needs.create_release.outputs.version }} WasmEdge-plugin-wasi_nn-openvino-${{ needs.create_release.outputs.version }}-ubuntu20.04_x86_64.tar.gz --clobber
      - name: Upload wasi_nn-tensorflowlite plugin tar.gz package
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mv plugin_wasi_nn-tensorflowlite.tar.gz WasmEdge-plugin-wasi_nn-tensorflowlite-${{ needs.create_release.outputs.version }}-ubuntu20.04_x86_64.tar.gz
          gh release upload ${{ needs.create_release.outputs.version }} WasmEdge-plugin-wasi_nn-tensorflowlite-${{ needs.create_release.outputs.version }}-ubuntu20.04_x86_64.tar.gz --clobber
      - name: Upload wasi_nn-ggml plugin tar.gz package
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mv plugin_wasi_nn-ggml.tar.gz WasmEdge-plugin-wasi_nn-ggml-${{ needs.create_release.outputs.version }}-ubuntu20.04_x86_64.tar.gz
          gh release upload ${{ needs.create_release.outputs.version }} WasmEdge-plugin-wasi_nn-ggml-${{ needs.create_release.outputs.version }}-ubuntu20.04_x86_64.tar.gz --clobber
      - name: Upload wasi_nn-whisper plugin tar.gz package
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mv plugin_wasi_nn-whisper.tar.gz WasmEdge-plugin-wasi_nn-whisper-${{ needs.create_release.outputs.version }}-ubuntu20.04_x86_64.tar.gz
          gh release upload ${{ needs.create_release.outputs.version }} WasmEdge-plugin-wasi_nn-whisper-${{ needs.create_release.outputs.version }}-ubuntu20.04_x86_64.tar.gz --clobber
      - name: Upload wasi_nn-piper plugin tar.gz package
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mv plugin_wasi_nn-piper.tar.gz WasmEdge-plugin-wasi_nn-piper-${{ needs.create_release.outputs.version }}-ubuntu20.04_x86_64.tar.gz
          gh release upload ${{ needs.create_release.outputs.version }} WasmEdge-plugin-wasi_nn-piper-${{ needs.create_release.outputs.version }}-ubuntu20.04_x86_64.tar.gz --clobber

  build_and_upload_wasinn_burnrs_ubuntu:
    name: Build and upload WASI-NN burn.rs backend on Ubuntu 20.04
    runs-on: ubuntu-latest
    env:
      output_dir: build/plugins/wasi_nn_burnrs
      build_options: -DWASMEDGE_PLUGIN_WASI_NN_BURNRS_MODEL=squeezenet -DWASMEDGE_PLUGIN_WASI_NN_BURNRS_MODEL=whisper
      tar_names: wasi_nn_burnrs-squeezenet wasi_nn_burnrs-whisper
      output_bin: libwasmedgePluginWasiNN.so
    needs: create_release
    container:
      image: wasmedge/wasmedge:ubuntu-20.04-build-clang
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Grant the safe directory for git
        run: |
          git config --global --add safe.directory $(pwd)
      - uses: dtolnay/rust-toolchain@stable
      - name: Install dependencies
        shell: bash
        run: |
          apt update
          apt install -y pkg-config libssl-dev
      - name: Build WASI-NN plugin
        shell: bash
        run: |
          plugin_array=(${tar_names})
          option_array=(${build_options})
          cmake -Bbuild -GNinja -DCMAKE_BUILD_TYPE=Release -DWASMEDGE_USE_LLVM=OFF -DWASMEDGE_BUILD_TOOLS=OFF
          for (( i=0; i<${#plugin_array[@]}; i++ ));
          do
            echo "Building ${plugin_array[$i]} backend:"
            cmake -Bbuild -GNinja ${option_array[$i]}
            cmake --build build --target wasmedgePluginWasiNNBurnRS

            echo "Copying ${plugin_array[$i]} backend:"
            cp -f ${output_dir}/${output_bin} ${output_bin}
            tar -zcvf plugin_${plugin_array[$i]}.tar.gz ${output_bin}
          done
      - name: Install gh
        run: |
          type -p curl >/dev/null || (apt update && apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && apt update \
          && apt install gh -y
      - name: Upload wasi_nn_burnrs-squeezenet plugin tar.gz package
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mv plugin_wasi_nn_burnrs-squeezenet.tar.gz WasmEdge-plugin-wasi_nn_burnrs-squeezenet-${{ needs.create_release.outputs.version }}-ubuntu20.04_x86_64.tar.gz
          gh release upload ${{ needs.create_release.outputs.version }} WasmEdge-plugin-wasi_nn_burnrs-squeezenet-${{ needs.create_release.outputs.version }}-ubuntu20.04_x86_64.tar.gz --clobber
      - name: Upload wasi_nn_burnrs-whisper plugin tar.gz package
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mv plugin_wasi_nn_burnrs-whisper.tar.gz WasmEdge-plugin-wasi_nn_burnrs-whisper-${{ needs.create_release.outputs.version }}-ubuntu20.04_x86_64.tar.gz
          gh release upload ${{ needs.create_release.outputs.version }} WasmEdge-plugin-wasi_nn_burnrs-whisper-${{ needs.create_release.outputs.version }}-ubuntu20.04_x86_64.tar.gz --clobber

  build_and_upload_plugin_ubuntu:
    name: Build and upload plugins on Ubuntu 20.04
    runs-on: ubuntu-latest
    env:
      output_prefix: build/plugins
      build_options: -DWASMEDGE_PLUGIN_WASI_CRYPTO=ON -DWASMEDGE_PLUGIN_PROCESS=ON -DWASMEDGE_PLUGIN_TENSORFLOW=ON -DWASMEDGE_PLUGIN_TENSORFLOWLITE=ON -DWASMEDGE_PLUGIN_IMAGE=ON -DWASMEDGE_PLUGIN_WASM_BPF=ON -DWASMEDGE_PLUGIN_OPENCVMINI=ON -DWASMEDGE_PLUGIN_ZLIB=ON -DWASMEDGE_PLUGIN_FFMPEG=ON -DWASMEDGE_PLUGIN_STABLEDIFFUSION=ON
      tar_names: wasi_crypto wasmedge_process wasmedge_tensorflow wasmedge_tensorflowlite wasmedge_image wasm_bpf wasmedge_opencvmini wasmedge_zlib wasmedge_ffmpeg wasmedge_stablediffusion
      output_bins: libwasmedgePluginWasiCrypto.so libwasmedgePluginWasmEdgeProcess.so libwasmedgePluginWasmEdgeTensorflow.so libwasmedgePluginWasmEdgeTensorflowLite.so libwasmedgePluginWasmEdgeImage.so libwasmedgePluginWasmBpf.so libwasmedgePluginWasmEdgeOpenCVMini.so libwasmedgePluginWasmEdgeZlib.so libwasmedgePluginWasmEdgeFFmpeg.so libwasmedgePluginWasmEdgeStableDiffusion.so
      OPENCV_VERSION: "4.8.0"
    needs: create_release
    container:
      image: wasmedge/wasmedge:ubuntu-20.04-build-clang
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Grant the safe directory for git
        run: |
          git config --global --add safe.directory $(pwd)
      - name: Install dependencies
        run: |
          apt update
          apt install -y libssl-dev cmake g++ wget unzip
          apt install -y libelf-dev zlib1g-dev pkg-config
          apt install -y cargo
          apt install -y yasm
          bash utils/ffmpeg/install-ffmpeg-v6.0.sh
          bash utils/opencvmini/install-opencvmini.sh
      - name: Build plugins
        shell: bash
        run: |
          outbin_array=(${output_bins})
          export PKG_CONFIG_PATH=$(pwd)/FFmpeg-n6.0/output/lib/pkgconfig
          cmake -Bbuild -GNinja -DCMAKE_BUILD_TYPE=Release -DWASMEDGE_USE_LLVM=OFF -DWASMEDGE_BUILD_TOOLS=OFF ${build_options}
          for (( i=0; i<${#outbin_array[@]}; i++ ));
          do
            echo "Building ${outbin_array[$i]} :"
            outtarget=${outbin_array[$i]}
            outtarget=${outtarget%.*}
            outtarget=${outtarget#lib}
            cmake --build build --target ${outtarget}
          done
      - name: Prepare the plugins tar.gz package
        shell: bash
        run: |
          export LD_LIBRARY_PATH=$(pwd)/FFmpeg-n6.0/output/lib:$LD_LIBRARY_PATH
          plugin_array=(${tar_names})
          outbin_array=(${output_bins})
          for (( i=0; i<${#plugin_array[@]}; i++ ));
          do
            echo "Copying ${plugin_array[$i]} :"
            cp ${output_prefix}/${plugin_array[$i]}/${outbin_array[$i]} ${outbin_array[$i]}
            tar -zcvf plugin_${plugin_array[$i]}.tar.gz ${outbin_array[$i]}
          done
      - name: Install gh
        run: |
          type -p curl >/dev/null || (apt update && apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && apt update \
          && apt install gh -y
      - name: Upload wasi_crypto plugin tar.gz package
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mv plugin_wasi_crypto.tar.gz WasmEdge-plugin-wasi_crypto-${{ needs.create_release.outputs.version }}-ubuntu20.04_x86_64.tar.gz
          gh release upload ${{ needs.create_release.outputs.version }} WasmEdge-plugin-wasi_crypto-${{ needs.create_release.outputs.version }}-ubuntu20.04_x86_64.tar.gz --clobber
      - name: Upload wasmedge_process plugin tar.gz package
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mv plugin_wasmedge_process.tar.gz WasmEdge-plugin-wasmedge_process-${{ needs.create_release.outputs.version }}-ubuntu20.04_x86_64.tar.gz
          gh release upload ${{ needs.create_release.outputs.version }} WasmEdge-plugin-wasmedge_process-${{ needs.create_release.outputs.version }}-ubuntu20.04_x86_64.tar.gz --clobber
      - name: Upload wasmedge_tensorflow plugin tar.gz package
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mv plugin_wasmedge_tensorflow.tar.gz WasmEdge-plugin-wasmedge_tensorflow-${{ needs.create_release.outputs.version }}-ubuntu20.04_x86_64.tar.gz
          gh release upload ${{ needs.create_release.outputs.version }} WasmEdge-plugin-wasmedge_tensorflow-${{ needs.create_release.outputs.version }}-ubuntu20.04_x86_64.tar.gz --clobber
      - name: Upload wasmedge_tensorflowlite plugin tar.gz package
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mv plugin_wasmedge_tensorflowlite.tar.gz WasmEdge-plugin-wasmedge_tensorflowlite-${{ needs.create_release.outputs.version }}-ubuntu20.04_x86_64.tar.gz
          gh release upload ${{ needs.create_release.outputs.version }} WasmEdge-plugin-wasmedge_tensorflowlite-${{ needs.create_release.outputs.version }}-ubuntu20.04_x86_64.tar.gz --clobber
      - name: Upload wasmedge_image plugin tar.gz package
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mv plugin_wasmedge_image.tar.gz WasmEdge-plugin-wasmedge_image-${{ needs.create_release.outputs.version }}-ubuntu20.04_x86_64.tar.gz
          gh release upload ${{ needs.create_release.outputs.version }} WasmEdge-plugin-wasmedge_image-${{ needs.create_release.outputs.version }}-ubuntu20.04_x86_64.tar.gz --clobber
      - name: Upload wasm_bpf plugin tar.gz package
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mv plugin_wasm_bpf.tar.gz WasmEdge-plugin-wasm_bpf-${{ needs.create_release.outputs.version }}-ubuntu20.04_x86_64.tar.gz
          gh release upload ${{ needs.create_release.outputs.version }} WasmEdge-plugin-wasm_bpf-${{ needs.create_release.outputs.version }}-ubuntu20.04_x86_64.tar.gz --clobber
      - name: Upload wasmedge_opencvmini plugin tar.gz package
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mv plugin_wasmedge_opencvmini.tar.gz WasmEdge-plugin-wasmedge_opencvmini-${{ needs.create_release.outputs.version }}-ubuntu20.04_x86_64.tar.gz
          gh release upload ${{ needs.create_release.outputs.version }} WasmEdge-plugin-wasmedge_opencvmini-${{ needs.create_release.outputs.version }}-ubuntu20.04_x86_64.tar.gz --clobber
      - name: Upload wasmedge_zlib plugin tar.gz package
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mv plugin_wasmedge_zlib.tar.gz WasmEdge-plugin-wasmedge_zlib-${{ needs.create_release.outputs.version }}-ubuntu20.04_x86_64.tar.gz
          gh release upload ${{ needs.create_release.outputs.version }} WasmEdge-plugin-wasmedge_zlib-${{ needs.create_release.outputs.version }}-ubuntu20.04_x86_64.tar.gz --clobber
      - name: Upload wasmedge_ffmpeg plugin tar.gz package
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mv plugin_wasmedge_ffmpeg.tar.gz WasmEdge-plugin-wasmedge_ffmpeg-${{ needs.create_release.outputs.version }}-ubuntu20.04_x86_64.tar.gz
          gh release upload ${{ needs.create_release.outputs.version }} WasmEdge-plugin-wasmedge_ffmpeg-${{ needs.create_release.outputs.version }}-ubuntu20.04_x86_64.tar.gz --clobber
      - name: Upload wasmedge_stablediffusion plugin tar.gz package
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mv plugin_wasmedge_stablediffusion.tar.gz WasmEdge-plugin-wasmedge_stablediffusion-${{ needs.create_release.outputs.version }}-ubuntu20.04_x86_64.tar.gz
          gh release upload ${{ needs.create_release.outputs.version }} WasmEdge-plugin-wasmedge_stablediffusion-${{ needs.create_release.outputs.version }}-ubuntu20.04_x86_64.tar.gz --clobber

  build_and_upload_plugin_ubuntu_cuda:
    strategy:
      matrix:
        include:
          - cuda_version: '11.3'
          - cuda_version: '12.0'
    name: Build and upload plugins on Ubuntu 20.04 with CUDA  ${{ matrix.cuda_version }}
    runs-on: ubuntu-latest
    container: wasmedge/wasmedge:ubuntu-20.04-build-gcc
    needs: create_release
    env:
      CUDA_VER: ${{ matrix.cuda_version }}
      CUDAARCHS: "60;61;70"
      output_prefix: build/plugins
      build_options: -DWASMEDGE_PLUGIN_STABLEDIFFUSION=ON -DWASMEDGE_PLUGIN_STABLEDIFFUSION_CUBLAS=ON
      tar_names: wasmedge_stablediffusion
      output_bins: libwasmedgePluginWasmEdgeStableDiffusion.so
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Grant the safe directory for git
        run: |
          git config --global --add safe.directory $(pwd)
      - name: Install dependencies
        shell: bash
        run: |
          CUDA_KEYRING=cuda-keyring_1.1-1_all.deb
          NVCC_VER=${CUDA_VER//./-}
          wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/${CUDA_KEYRING}
          dpkg -i ${CUDA_KEYRING}
          rm -f ${CUDA_KEYRING}
          wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null
          apt-add-repository "deb https://apt.kitware.com/ubuntu/ $(lsb_release -cs) main"
          apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 6AF7F09730B3F0A4
          export DEBIAN_FRONTEND=noninteractive
          apt-get update
          apt-get remove -y --purge --auto-remove cmake
          apt-get upgrade -y
          apt-get install -y cmake cuda-nvcc-${NVCC_VER} libcublas-dev-${NVCC_VER} lsb-release pkg-config software-properties-common unzip
      - name: Build plugins with CUDA
        shell: bash
        run: |
          export CXXFLAGS="-Wno-error"
          outbin_array=(${output_bins})
          cmake -Bbuild -GNinja -DCMAKE_BUILD_TYPE=Release -DWASMEDGE_BUILD_TESTS=OFF -DWASMEDGE_BUILD_AOT_RUNTIME=OFF -DWASMEDGE_BUILD_TOOLS=OFF -DCMAKE_CUDA_ARCHITECTURES="${CUDAARCHS}" -DCMAKE_CUDA_COMPILER=/usr/local/cuda/bin/nvcc -DWASMEDGE_USE_LLVM=OFF ${build_options}
          for (( i=0; i<${#outbin_array[@]}; i++ ));
          do
            echo "Building ${outbin_array[$i]} :"
            outtarget=${outbin_array[$i]}
            outtarget=${outtarget%.*}
            outtarget=${outtarget#lib}
            cmake --build build --target ${outtarget}
          done
      - name: Prepare the plugins tar.gz package
        shell: bash
        run: |
          plugin_array=(${tar_names})
          outbin_array=(${output_bins})
          for (( i=0; i<${#plugin_array[@]}; i++ ));
          do
            echo "Copying ${plugin_array[$i]} :"
            cp ${output_prefix}/${plugin_array[$i]}/${outbin_array[$i]} ${outbin_array[$i]}
            tar -zcvf plugin_${plugin_array[$i]}.tar.gz ${outbin_array[$i]}
          done
      - name: Install gh
        run: |
          type -p curl >/dev/null || (apt update && apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && apt update \
          && apt install gh -y
      - name: Upload wasmedge_stablediffusion CUDA ${{ matrix.cuda_version }} plugin tar.gz package
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mv plugin_wasmedge_stablediffusion.tar.gz WasmEdge-plugin-wasmedge_stablediffusion-cuda-${{ matrix.cuda_version }}-${{ needs.create_release.outputs.version }}-ubuntu20.04_x86_64.tar.gz
          gh release upload ${{ needs.create_release.outputs.version }} WasmEdge-plugin-wasmedge_stablediffusion-cuda-${{ matrix.cuda_version }}-${{ needs.create_release.outputs.version }}-ubuntu20.04_x86_64.tar.gz --clobber

  build_and_upload_plugins_manylinux:
    name: Build and upload plugins on manylinux
    needs: create_release
    uses: ./.github/workflows/reusable-build-extensions.yml
    with:
      version: ${{ needs.create_release.outputs.version }}
      release: true
    secrets: inherit

  build_and_upload_wasinn_macos:
    strategy:
      matrix:
        include:
          - system: MacOS 12 (x86_64)
            host_runner: macos-12
            arch: x86_64
          - system: MacOS 14 (arm64)
            host_runner: macos-14
            arch: arm64
    name: Build and upload WASI-NN on ${{ matrix.system }}
    runs-on: ${{ matrix.host_runner }}
    env:
      output_dir: build/plugins/wasi_nn
      build_options: -DWASMEDGE_PLUGIN_WASI_NN_BACKEND=TensorFlowLite -DWASMEDGE_PLUGIN_WASI_NN_BACKEND=Whisper
      tar_names: wasi_nn-tensorflowlite wasi_nn-whisper
      output_bin: libwasmedgePluginWasiNN.dylib
    needs: create_release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Grant the safe directory for git
        run: |
          git config --global --add safe.directory $(pwd)
      - name: Install dependencies
        run: |
          eval $(/opt/homebrew/bin/brew shellenv)
          brew install llvm@16 ninja cmake gh
      - name: Build WASI-NN plugin
        shell: bash
        run: |
          eval $(/opt/homebrew/bin/brew shellenv)
          plugin_array=(${tar_names})
          option_array=(${build_options})
          outtarget=${output_bin%.*}
          outtarget=${outtarget#lib}
          cmake -Bbuild -GNinja -DCMAKE_BUILD_TYPE=Release -DWASMEDGE_USE_LLVM=OFF -DWASMEDGE_BUILD_TOOLS=OFF
          for (( i=0; i<${#plugin_array[@]}; i++ ));
          do
            echo "Building ${plugin_array[$i]} backend:"
            cmake -Bbuild -GNinja ${option_array[$i]}
            cmake --build build --target ${outtarget}

            echo "Copying ${plugin_array[$i]} backend:"
            cp -f ${output_dir}/${output_bin} ${output_bin}
            tar -zcvf plugin_${plugin_array[$i]}.tar.gz ${output_bin}
          done
      - name: Upload wasi_nn-tensorflowlite plugin tar.gz package
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          eval $(/opt/homebrew/bin/brew shellenv)
          mv plugin_wasi_nn-tensorflowlite.tar.gz WasmEdge-plugin-wasi_nn-tensorflowlite-${{ needs.create_release.outputs.version }}-darwin_${{ matrix.arch }}.tar.gz
          gh release upload ${{ needs.create_release.outputs.version }} WasmEdge-plugin-wasi_nn-tensorflowlite-${{ needs.create_release.outputs.version }}-darwin_${{ matrix.arch }}.tar.gz --clobber
      - name: Upload wasi_nn-whisper plugin tar.gz package
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          eval $(/opt/homebrew/bin/brew shellenv)
          mv plugin_wasi_nn-whisper.tar.gz WasmEdge-plugin-wasi_nn-whisper-${{ needs.create_release.outputs.version }}-darwin_${{ matrix.arch }}.tar.gz
          gh release upload ${{ needs.create_release.outputs.version }} WasmEdge-plugin-wasi_nn-whisper-${{ needs.create_release.outputs.version }}-darwin_${{ matrix.arch }}.tar.gz --clobber

  build_and_upload_plugin_macos:
    strategy:
      matrix:
        include:
          - system: MacOS 12 (x86_64)
            host_runner: macos-12
            arch: x86_64
          - system: MacOS 14 (arm64)
            host_runner: macos-14
            arch: arm64
    name: Build and upload plugins on ${{ matrix.system }}
    runs-on: ${{ matrix.host_runner }}
    env:
      output_prefix: build/plugins
      build_options: -DWASMEDGE_PLUGIN_WASI_CRYPTO=ON -DWASMEDGE_PLUGIN_TENSORFLOW=ON -DWASMEDGE_PLUGIN_TENSORFLOWLITE=ON -DWASMEDGE_PLUGIN_IMAGE=ON -DWASMEDGE_PLUGIN_OPENCVMINI=ON -DWASMEDGE_PLUGIN_ZLIB=ON -DWASMEDGE_PLUGIN_FFMPEG=ON -DWASMEDGE_PLUGIN_STABLEDIFFUSION=ON
      tar_names: wasi_crypto wasmedge_tensorflow wasmedge_tensorflowlite wasmedge_image wasmedge_opencvmini wasmedge_zlib wasmedge_ffmpeg wasmedge_stablediffusion
      output_bins: libwasmedgePluginWasiCrypto.dylib libwasmedgePluginWasmEdgeTensorflow.dylib libwasmedgePluginWasmEdgeTensorflowLite.dylib libwasmedgePluginWasmEdgeImage.dylib libwasmedgePluginWasmEdgeOpenCVMini.dylib libwasmedgePluginWasmEdgeZlib.dylib libwasmedgePluginWasmEdgeFFmpeg.dylib libwasmedgePluginWasmEdgeStableDiffusion.dylib
    needs: create_release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Grant the safe directory for git
        run: |
          git config --global --add safe.directory $(pwd)
      - name: Install dependencies
        run: |
          eval $(/opt/homebrew/bin/brew shellenv)
          brew install llvm@16 ninja cmake openssl opencv rust gh ffmpeg@6
      - name: Build plugins
        shell: bash
        run: |
          eval $(/opt/homebrew/bin/brew shellenv)
          outbin_array=(${output_bins})
          export LLVM_DIR="$(brew --prefix)/opt/llvm@16/lib/cmake"
          export PKG_CONFIG_PATH="$(brew --prefix)/opt/ffmpeg@6/lib/pkgconfig:$PKG_CONFIG_PATH"
          export CC=clang
          export CXX=clang++
          cmake -Bbuild -GNinja -DCMAKE_BUILD_TYPE=Release -DWASMEDGE_USE_LLVM=OFF -DWASMEDGE_BUILD_TOOLS=OFF -DOPENSSL_ROOT_DIR=$(brew --prefix)/opt/openssl ${build_options}
          for (( i=0; i<${#outbin_array[@]}; i++ ));
          do
            echo "Building ${outbin_array[$i]} :"
            outtarget=${outbin_array[$i]}
            outtarget=${outtarget%.*}
            outtarget=${outtarget#lib}
            cmake --build build --target ${outtarget}
          done
      - name: Prepare the WasmEdge plugins tar.gz package
        shell: bash
        run: |
          plugin_array=(${tar_names})
          outbin_array=(${output_bins})
          for (( i=0; i<${#plugin_array[@]}; i++ ));
          do
            echo "Copying ${plugin_array[$i]} :"
            cp ${output_prefix}/${plugin_array[$i]}/${outbin_array[$i]} ${outbin_array[$i]}
            tar -zcvf plugin_${plugin_array[$i]}.tar.gz ${outbin_array[$i]}
          done
      - name: Upload wasi_crypto plugin tar.gz package
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          eval $(/opt/homebrew/bin/brew shellenv)
          mv plugin_wasi_crypto.tar.gz WasmEdge-plugin-wasi_crypto-${{ needs.create_release.outputs.version }}-darwin_${{ matrix.arch }}.tar.gz
          gh release upload ${{ needs.create_release.outputs.version }} WasmEdge-plugin-wasi_crypto-${{ needs.create_release.outputs.version }}-darwin_${{ matrix.arch }}.tar.gz --clobber
      - name: Upload wasmedge_tensorflow plugin tar.gz package
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          eval $(/opt/homebrew/bin/brew shellenv)
          mv plugin_wasmedge_tensorflow.tar.gz WasmEdge-plugin-wasmedge_tensorflow-${{ needs.create_release.outputs.version }}-darwin_${{ matrix.arch }}.tar.gz
          gh release upload ${{ needs.create_release.outputs.version }} WasmEdge-plugin-wasmedge_tensorflow-${{ needs.create_release.outputs.version }}-darwin_${{ matrix.arch }}.tar.gz --clobber
      - name: Upload wasmedge_tensorflowlite plugin tar.gz package
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          eval $(/opt/homebrew/bin/brew shellenv)
          mv plugin_wasmedge_tensorflowlite.tar.gz WasmEdge-plugin-wasmedge_tensorflowlite-${{ needs.create_release.outputs.version }}-darwin_${{ matrix.arch }}.tar.gz
          gh release upload ${{ needs.create_release.outputs.version }} WasmEdge-plugin-wasmedge_tensorflowlite-${{ needs.create_release.outputs.version }}-darwin_${{ matrix.arch }}.tar.gz --clobber
      - name: Upload wasmedge_image plugin tar.gz package
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          eval $(/opt/homebrew/bin/brew shellenv)
          mv plugin_wasmedge_image.tar.gz WasmEdge-plugin-wasmedge_image-${{ needs.create_release.outputs.version }}-darwin_${{ matrix.arch }}.tar.gz
          gh release upload ${{ needs.create_release.outputs.version }} WasmEdge-plugin-wasmedge_image-${{ needs.create_release.outputs.version }}-darwin_${{ matrix.arch }}.tar.gz --clobber
      - name: Upload wasmedge_opencvmini plugin tar.gz package
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          eval $(/opt/homebrew/bin/brew shellenv)
          mv plugin_wasmedge_opencvmini.tar.gz WasmEdge-plugin-wasmedge_opencvmini-${{ needs.create_release.outputs.version }}-darwin_${{ matrix.arch }}.tar.gz
          gh release upload ${{ needs.create_release.outputs.version }} WasmEdge-plugin-wasmedge_opencvmini-${{ needs.create_release.outputs.version }}-darwin_${{ matrix.arch }}.tar.gz --clobber
      - name: Upload wasmedge_zlib plugin tar.gz package
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          eval $(/opt/homebrew/bin/brew shellenv)
          mv plugin_wasmedge_zlib.tar.gz WasmEdge-plugin-wasmedge_zlib-${{ needs.create_release.outputs.version }}-darwin_${{ matrix.arch }}.tar.gz
          gh release upload ${{ needs.create_release.outputs.version }} WasmEdge-plugin-wasmedge_zlib-${{ needs.create_release.outputs.version }}-darwin_${{ matrix.arch }}.tar.gz --clobber
      - name: Upload wasmedge_ffmpeg plugin tar.gz package
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mv plugin_wasmedge_ffmpeg.tar.gz WasmEdge-plugin-wasmedge_ffmpeg-${{ needs.create_release.outputs.version }}-darwin_${{ matrix.arch }}.tar.gz
          gh release upload ${{ needs.create_release.outputs.version }} WasmEdge-plugin-wasmedge_ffmpeg-${{ needs.create_release.outputs.version }}-darwin_${{ matrix.arch }}.tar.gz --clobber
      - name: Upload wasmedge_stablediffusion plugin tar.gz package
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mv plugin_wasmedge_stablediffusion.tar.gz WasmEdge-plugin-wasmedge_stablediffusion-${{ needs.create_release.outputs.version }}-darwin_${{ matrix.arch }}.tar.gz
          gh release upload ${{ needs.create_release.outputs.version }} WasmEdge-plugin-wasmedge_stablediffusion-${{ needs.create_release.outputs.version }}-darwin_${{ matrix.arch }}.tar.gz --clobber

  build_and_upload_plugin_macos_metal:
    strategy:
      matrix:
        include:
          - system: MacOS 14 (arm64)
            host_runner: macos-14
            arch: arm64
    name: Build and upload plugins on ${{ matrix.system }} with Metal
    runs-on: ${{ matrix.host_runner }}
    env:
      output_prefix: build/plugins
      build_options: -DWASMEDGE_PLUGIN_STABLEDIFFUSION=ON -DWASMEDGE_PLUGIN_STABLEDIFFUSION_METAL=ON
      tar_names: wasmedge_stablediffusion
      output_bins: libwasmedgePluginWasmEdgeStableDiffusion.dylib
    needs: create_release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Grant the safe directory for git
        run: |
          git config --global --add safe.directory $(pwd)
      - name: Install dependencies
        run: |
          eval $(/opt/homebrew/bin/brew shellenv)
          brew install llvm@16 ninja cmake gh
      - name: Build plugins
        shell: bash
        run: |
          eval $(/opt/homebrew/bin/brew shellenv)
          outbin_array=(${output_bins})
          export LLVM_DIR="$(brew --prefix)/opt/llvm@16/lib/cmake"
          export CC=clang
          export CXX=clang++
          cmake -Bbuild -GNinja -DCMAKE_BUILD_TYPE=Release -DWASMEDGE_USE_LLVM=OFF -DWASMEDGE_BUILD_TOOLS=OFF -DOPENSSL_ROOT_DIR=$(brew --prefix)/opt/openssl ${build_options}
          for (( i=0; i<${#outbin_array[@]}; i++ ));
          do
            echo "Building ${outbin_array[$i]} :"
            outtarget=${outbin_array[$i]}
            outtarget=${outtarget%.*}
            outtarget=${outtarget#lib}
            cmake --build build --target ${outtarget}
          done
      - name: Prepare the WasmEdge plugins tar.gz package (with metal files)
        shell: bash
        run: |
          plugin_array=(${tar_names})
          outbin_array=(${output_bins})
          for (( i=0; i<${#plugin_array[@]}; i++ ));
          do
            echo "Copying ${plugin_array[$i]} :"
            for plugin_files in "${outbin_array[$i]}" "ggml-metal.metal" "ggml-common.h"
            do
              cp ${output_prefix}/${plugin_array[$i]}/$plugin_files .
            done
            tar -zcvf plugin_${plugin_array[$i]}.tar.gz "${outbin_array[$i]}" "ggml-metal.metal" "ggml-common.h"
          done
      - name: Upload wasmedge_stablediffusion plugin tar.gz package
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mv plugin_wasmedge_stablediffusion.tar.gz WasmEdge-plugin-wasmedge_stablediffusion-metal-${{ needs.create_release.outputs.version }}-darwin_${{ matrix.arch }}.tar.gz
          gh release upload ${{ needs.create_release.outputs.version }} WasmEdge-plugin-wasmedge_stablediffusion-metal-${{ needs.create_release.outputs.version }}-darwin_${{ matrix.arch }}.tar.gz --clobber

  generate_sbom:
    name: Generate SBOM
    runs-on: ubuntu-latest
    needs: create_release
    steps:
      - name: checkout code
        uses: actions/checkout@v4

      - name: Grant the safe directory for git
        run: |
          git config --global --add safe.directory $(pwd)
      - name: generate sbom
        uses: advanced-security/sbom-generator-action@v0.0.1
        id: sbom
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

      - name: Generate tar.gz file and upload release
        shell: bash
        run: |
          tar -zcvf sbom.tar.gz ${{steps.sbom.outputs.fileName}}
          gh release upload ${{needs.create_release.outputs.version}} sbom.tar.gz --clobber
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
