name: Build extensions

on:
  workflow_call:
    inputs:
      version:
        type: string
        required: true
      release:
        type: boolean
        default: false

jobs:
  # ------------------------------------------------------------------#
  # The list of build targets is in the file:
  #     .github/workflows/matrix-extensions.json
  #
  # 'paths-filter' example:
  #
  #   wasmedge_stablediffusion:
  #     - paths/to/wasmedge_stablediffusion
  #     - other/paths/to/wasmedge_stablediffusion
  #
  # plugin: 'wasmedge_stablediffusion-metal'
  #
  #   process.env['wasmedge_stablediffusion'] => true
  #   process.env['wasmedge_stablediffusion-metal'] => undefined
  # ------------------------------------------------------------------#
  prepare:
    name: Prepare ${{ inputs.asset_tag }}
    runs-on: ubuntu-latest
    outputs:
      macos_x86_64: ${{ steps.readfile.outputs.macos_x86_64 }}
      macos_arm64: ${{ steps.readfile.outputs.macos_arm64 }}
      manylinux_2_28_x86_64: ${{ steps.readfile.outputs.manylinux_2_28_x86_64 }}
      manylinux_2_28_aarch64: ${{ steps.readfile.outputs.manylinux_2_28_aarch64 }}
      ubuntu2004_x86_64: ${{ steps.readfile.outputs.ubuntu2004_x86_64 }}
      ubuntu2004_cuda11: ${{ steps.readfile.outputs.ubuntu2004_cuda11 }}
      ubuntu2004_cuda12: ${{ steps.readfile.outputs.ubuntu2004_cuda12 }}
      ubuntu_latest: ${{ steps.readfile.outputs.ubuntu_latest }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: '.github/extensions.paths-filter.yml'
      - id: readfile
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const fs = require("fs")
            const s = fs.readFileSync(".github/workflows/matrix-extensions.json")
            let plugins = JSON.parse(s).plugins
            if (!${{ inputs.release || fromJSON(steps.filter.outputs.all) }}) {
              plugins = plugins.filter(
                (plugin) => !(
                  process.env[plugin.plugin] != 'true' &&
                  process.env[plugin.plugin.split('-')[0]] != 'true')
              )
            }
            let asset_tags = [
              "macos_x86_64",
              "macos_arm64",
              "manylinux_2_28_x86_64",
              "manylinux_2_28_aarch64",
              "ubuntu2004_x86_64",
              "ubuntu2004_cuda11",
              "ubuntu2004_cuda12",
              "ubuntu_latest",
            ]
            for (const tag of asset_tags) {
              core.setOutput(tag, plugins.filter(
                (plugin) => plugin.platforms.includes(tag)
              ).map((plugin) => {
                let copy = { ...plugin }
                delete copy.platforms
                return copy
              }))
            }
        env:
          wasi_crypto: ${{ steps.filter.outputs.wasi_crypto }}
          wasi_nn: ${{ steps.filter.outputs.wasi_nn }}
          wasm_bpf: ${{ steps.filter.outputs.wasm_bpf }}
          wasmedge_ffmpeg: ${{ steps.filter.outputs.wasmedge_ffmpeg }}
          wasmedge_image: ${{ steps.filter.outputs.wasmedge_image }}
          wasmedge_llmc: ${{ steps.filter.outputs.wasmedge_llmc }}
          wasmedge_opencvmini: ${{ steps.filter.outputs.wasmedge_opencvmini }}
          wasmedge_process: ${{ steps.filter.outputs.wasmedge_process }}
          wasmedge_stablediffusion: ${{ steps.filter.outputs.wasmedge_stablediffusion }}
          wasmedge_tensorflow: ${{ steps.filter.outputs.wasmedge_tensorflow }}
          wasmedge_tensorflowlite: ${{ steps.filter.outputs.wasmedge_tensorflowlite }}
          wasmedge_zlib: ${{ steps.filter.outputs.wasmedge_zlib }}

  build_on_ubuntu:
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: 'ubuntu-latest'
            docker_tag: 'ubuntu-20.04-build-clang-plugins-deps'
            asset_tag: 'ubuntu20.04_x86_64'
            plugins: ${{ needs.prepare.outputs.ubuntu2004_x86_64 }}
          - runner: 'ubuntu-latest'
            docker_tag: 'ubuntu-20.04-build-gcc-cuda11'
            asset_tag: 'ubuntu20.04_x86_64'
            plugins: ${{ needs.prepare.outputs.ubuntu2004_cuda11 }}
          - runner: 'ubuntu-latest'
            docker_tag: 'ubuntu-20.04-build-gcc-cuda12'
            asset_tag: 'ubuntu20.04_x86_64'
            plugins: ${{ needs.prepare.outputs.ubuntu2004_cuda12 }}
    name: ${{ matrix.asset_tag }}
    uses: ./.github/workflows/reusable-build-extensions-on-linux.yml
    with:
      runner: ${{ matrix.runner }}
      docker_tag: ${{ matrix.docker_tag }}
      asset_tag: ${{ matrix.asset_tag }}
      plugins: ${{ matrix.plugins }}
      version: ${{ inputs.version }}
      release: ${{ inputs.release }}
    secrets: inherit

  build_on_ubuntu_latest:
    if: ${{ !inputs.release }}
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: 'ubuntu-latest'
            docker_tag: 'ubuntu-24.04-build-clang-plugins-deps'
            asset_tag: 'ubuntu24.04-clang'
            plugins: ${{ needs.prepare.outputs.ubuntu_latest }}
          - runner: 'ubuntu-latest'
            docker_tag: 'ubuntu-24.04-build-gcc-plugins-deps'
            asset_tag: 'ubuntu24.04-gcc'
            plugins: ${{ needs.prepare.outputs.ubuntu_latest }}
    name: ${{ matrix.asset_tag }}
    uses: ./.github/workflows/reusable-build-extensions-on-linux.yml
    with:
      runner: ${{ matrix.runner }}
      docker_tag: ${{ matrix.docker_tag }}
      asset_tag: ${{ matrix.asset_tag }}
      plugins: ${{ matrix.plugins }}
      version: ${{ inputs.version }}
      release: false
    secrets: inherit

  build_on_macos:
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: 'macos-13'
            asset_tag: 'darwin_22-x86_64'
            plugins: ${{ needs.prepare.outputs.macos_x86_64 }}
          - runner: 'macos-14'
            asset_tag: 'darwin_23-arm64'
            plugins: ${{ needs.prepare.outputs.macos_arm64 }}
    name: ${{ matrix.asset_tag }}
    uses: ./.github/workflows/reusable-build-extensions-on-macos.yml
    with:
      runner: ${{ matrix.runner }}
      asset_tag: ${{ matrix.asset_tag }}
      plugins: ${{ matrix.plugins }}
      version: ${{ inputs.version }}
      release: ${{ inputs.release }}
    secrets: inherit

  build_on_manylinux:
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: 'ubuntu-latest'
            docker_tag: 'manylinux_2_28_x86_64-plugins-deps'
            asset_tag: 'manylinux_2_28_x86_64'
            plugins: ${{ needs.prepare.outputs.manylinux_2_28_x86_64 }}
          - runner: 'linux-arm64-v2'
            docker_tag: 'manylinux_2_28_aarch64-plugins-deps'
            asset_tag: 'manylinux_2_28_aarch64'
            plugins: ${{ needs.prepare.outputs.manylinux_2_28_aarch64 }}
    name: ${{ matrix.asset_tag }}
    uses: ./.github/workflows/reusable-build-extensions-on-linux.yml
    with:
      runner: ${{ matrix.runner }}
      docker_tag: ${{ matrix.docker_tag }}
      asset_tag: ${{ matrix.asset_tag }}
      plugins: ${{ matrix.plugins }}
      version: ${{ inputs.version }}
      release: ${{ inputs.release }}
    secrets: inherit
