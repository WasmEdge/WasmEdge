name: Build on Windows with MSVC

on:
  workflow_call:
    inputs:
      version:
        type: string
        required: true
      release:
        type: boolean

permissions:
  contents: read

jobs:
  build_on_windows:
    permissions:
      contents: write
    name: Build on Windows Server 2022
    runs-on: windows-2022
    env:
      build_tests: ON
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
      - name: Ensure git safe directory
        run: |
          git config --global --add safe.directory $(pwd)
      - name: Install dependency
        uses: crazy-max/ghaction-chocolatey@6828f16489ec8d2968b55066766cb41f0d278f2a # v3.3.0
        with:
          args: install --no-progress ninja vswhere
      - name: Install Windows SDK
        uses: GuillaumeFalourd/setup-windows10-sdk-action@9979bedbf6ae74f038cc338622ba015942ed2408 # v2.4
        with:
          sdk-version: 26100
      - name: Set environment variables for release
        if: ${{ inputs.release }}
        run: |
          echo "build_tests=OFF" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
      - name: Build WasmEdge
        run: |
          $vsPath = (vswhere -latest -property installationPath)
          Import-Module (Join-Path $vsPath Common7\Tools\Microsoft.VisualStudio.DevShell.dll)
          Enter-VsDevShell -VsInstallPath $vsPath -SkipAutomaticLocation -DevCmdArguments "-arch=x64 -host_arch=x64 -winsdk=10.0.26100.0"
          $uri = "https://github.com/WasmEdge/llvm-windows/releases/download/llvmorg-19.1.6/LLVM-19.1.6-win64-MultiThreadedDLL.zip"
          $llvm = "LLVM-19.1.6-win64-MultiThreadedDLL.zip"
          Invoke-WebRequest -Uri $uri -HttpVersion 2.0 -OutFile $llvm
          Expand-Archive -Path $llvm
          $llvm_dir = "$pwd\LLVM-19.1.6-win64-MultiThreadedDLL\LLVM-19.1.6-win64\lib\cmake\llvm"
          $cmake_sys_version = "10.0.26100.0"
          cmake -Bbuild -GNinja -DCMAKE_SYSTEM_VERSION="$cmake_sys_version" -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreadedDLL -DLLVM_DIR:PATH="$llvm_dir" -DWASMEDGE_BUILD_TESTS="$Env:build_tests" -DWASMEDGE_BUILD_PACKAGE=ZIP .
          cmake --build build
      - name: Test WasmEdge
        run: |
          $vsPath = (vswhere -latest -property installationPath)
          Import-Module (Join-Path $vsPath Common7\Tools\Microsoft.VisualStudio.DevShell.dll)
          Enter-VsDevShell -VsInstallPath $vsPath -SkipAutomaticLocation -DevCmdArguments "-arch=x64 -host_arch=x64 -winsdk=10.0.26100.0"
          $Env:PATH += ";$pwd\build\lib\api"
          cd build
          tools\wasmedge\wasmedge -v
          ctest --output-on-failure
          cd -
      - name: Create WasmEdge package
        run: |
          $vsPath = (vswhere -latest -property installationPath)
          Import-Module (Join-Path $vsPath Common7\Tools\Microsoft.VisualStudio.DevShell.dll)
          Enter-VsDevShell -VsInstallPath $vsPath -SkipAutomaticLocation -DevCmdArguments "-arch=x64 -host_arch=x64 -winsdk=10.0.26100.0"
          cmake --build build --target package
          Get-ChildItem -Path $pwd\build
      - name: Generate product version and package Windows installer
        run: |
          $Env:product_version = ("${{ inputs.version }}").split("-")[0]
          . $Env:WIX\bin\candle.exe -arch x64 -o build\wasmedge.wixobj .github\scripts\wasmedge.wxs
          . $Env:WIX\bin\light.exe -out build\WasmEdge-$Env:product_version-windows-msvc.msi build\wasmedge.wixobj
          echo product_version=$Env:product_version | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
      - name: Upload artifact
        if: ${{ !inputs.release }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: WasmEdge-${{ inputs.version }}-windows-msvc.zip
          path: build\\WasmEdge-${{ inputs.version }}-Windows.zip
      - name: Upload Windows installer
        if: ${{ !inputs.release }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: WasmEdge-${{ env.product_version }}-windows-msvc.msi
          path: build\\WasmEdge-${{ env.product_version }}-windows-msvc.msi
      - name: Upload Windows 10 zip package
        if: ${{ inputs.release }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mv build\\WasmEdge-${{ inputs.version }}-Windows.zip WasmEdge-${{ inputs.version }}-windows-msvc.zip
          gh release upload ${{ inputs.version }} WasmEdge-${{ inputs.version }}-windows-msvc.zip --clobber
      - name: Upload Windows installer
        if: ${{ inputs.release }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mv build\\WasmEdge-${{ env.product_version }}-windows-msvc.msi WasmEdge-${{ env.product_version }}-windows-msvc.msi
          gh release upload ${{ inputs.version }} WasmEdge-${{ env.product_version }}-windows-msvc.msi --clobber
