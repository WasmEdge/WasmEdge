name: Build on Windows

on:
  workflow_call:
    inputs:
      version:
        type: string
        required: true
      release:
        type: boolean

jobs:
  build_on_windows:
    permissions:
      contents: write
    name: Build on Windows Server 2022
    runs-on: windows-2022
    env:
      build_tests: ON
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Ensure git safe directory
        run: |
          git config --global --add safe.directory $(pwd)
      - name: Install dependency
        uses: crazy-max/ghaction-chocolatey@v3
        with:
          args: install cmake ninja
      - name: Upgrade dependency
        uses: crazy-max/ghaction-chocolatey@v3
        with:
          args: upgrade llvm
      - name: Install Windows SDK
        uses: GuillaumeFalourd/setup-windows10-sdk-action@v2
        with:
          sdk-version: 22621
      - name: Set environment variables for release
        if: ${{ inputs.release }}
        run: |
          echo "build_tests=OFF" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
      - name: Build WasmEdge
        run: |
          $uri = "https://github.com/WasmEdge/llvm-windows/releases/download/llvmorg-17.0.6/LLVM-17.0.6-win64-MultiThreadedDLL.zip"
          $llvm = "LLVM-17.0.6-win64-MultiThreadedDLL.zip"
          Invoke-WebRequest -Uri "$uri" -HttpVersion 2.0 -OutFile "$llvm"
          Expand-Archive -Path $llvm
          $llvm_dir = "$pwd\\LLVM-17.0.6-win64-MultiThreadedDLL\\LLVM-17.0.6-win64\\lib\\cmake\\llvm"
          $Env:CC = "$pwd\\LLVM-17.0.6-win64-MultiThreadedDLL\\LLVM-17.0.6-win64\\bin\\clang-cl.exe"
          $Env:CXX = "$pwd\\LLVM-17.0.6-win64-MultiThreadedDLL\\LLVM-17.0.6-win64\\bin\\clang-cl.exe"
          $llvm_mt = "$Env:ProgramFiles\\LLVM\\bin\\llvm-mt.exe"
          $cmake_sys_version = "10.0.22621.0"
          cmake -Bbuild -GNinja "-DCMAKE_SYSTEM_VERSION=$cmake_sys_version" -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreadedDLL -DCMAKE_MT="$llvm_mt" "-DLLVM_DIR=$llvm_dir" "-DWASMEDGE_BUILD_TESTS=$Env:build_tests" -DWASMEDGE_BUILD_PACKAGE="ZIP" .
          cmake --build build
      - name: Test WasmEdge
        run: |
          $Env:PATH += ";$pwd\\build\\lib\\api"
          cd build
          tools\wasmedge\wasmedge -v
          ctest --output-on-failure
          cd -
      - name: Create WasmEdge package
        run: |
          cmake --build build --target package
          Get-ChildItem -Path "$pwd\\build"
      - name: Generate product version and package Windows installer
        run: |
          $Env:product_version = ("${{ inputs.version }}").split("-")[0]
          . "$Env:WIX\bin\candle.exe" -arch x64 -o build\wasmedge.wixobj .github\scripts\wasmedge.wxs
          . "$Env:WIX\bin\light.exe" -out build\WasmEdge-$Env:product_version-windows.msi build\wasmedge.wixobj
          echo "product_version=$Env:product_version" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
      - name: Upload artifact
        if: ${{ !inputs.release }}
        uses: actions/upload-artifact@v3
        with:
          name: WasmEdge-${{ inputs.version }}-windows.zip
          path: build\\WasmEdge-${{ inputs.version }}-Windows.zip
      - name: Upload Windows installer
        if: ${{ !inputs.release }}
        uses: actions/upload-artifact@v3
        with:
          name: WasmEdge-${{ env.product_version }}-windows.msi
          path: build\\WasmEdge-${{ env.product_version }}-windows.msi
      - name: Upload Windows 10 zip package
        if: ${{ inputs.release }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mv build\\WasmEdge-${{ inputs.version }}-Windows.zip WasmEdge-${{ inputs.version }}-windows.zip
          gh release upload ${{ inputs.version }} WasmEdge-${{ inputs.version }}-windows.zip --clobber
      - name: Upload Windows installer
        if: ${{ inputs.release }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mv build\\WasmEdge-${{ env.product_version }}-windows.msi WasmEdge-${{ env.product_version }}-windows.msi
          gh release upload ${{ inputs.version }} WasmEdge-${{ env.product_version }}-windows.msi --clobber
