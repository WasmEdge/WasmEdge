name: rust-standalone-test

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch:
    branches:
      - master
      - "rust/*"
      - "ci/update-rust-standalone"

jobs:
  build_ubuntu:
    name: Ubuntu
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, ubuntu-22.04]
    container:
      image: wasmedge/wasmedge:ubuntu-build-clang

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Build WasmEdge with Release mode
        run: |
          apt update
          apt install -y software-properties-common libboost-all-dev llvm-12-dev liblld-12-dev ninja-build
          cmake -Bbuild -GNinja -DCMAKE_BUILD_TYPE=Release -DWASMEDGE_PLUGIN_PROCESS=On .
          cmake --build build
  
      - name: Install Rust-stable
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.69
    
      - name: Run in the standalone mode
        working-directory: bindings/rust/
        run: |
          export LLVM_DIR="/usr/local/opt/llvm/lib/cmake"
          export CC=clang
          export CXX=clang++
          export LD_LIBRARY_PATH=$HOME/.wasmedge/lib
          export WASMEDGE_DIR="$(pwd)/../../"
          cargo test -p wasmedge-sdk --all --examples --features standalone,aot,async,wasi_crypto,wasi_nn,wasmedge_process,ffi

  build_macos:
    name: MacOS
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-11, macos-12]

    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install Rust v1.68
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.69

      - name: Install build tools
        run: brew install llvm ninja boost cmake

      - name: Install libwasmedge
        working-directory: bindings/rust/
        run: |
          export LLVM_DIR="/usr/local/opt/llvm/lib/cmake"
          export CC=clang
          export CXX=clang++
          export DYLD_LIBRARY_PATH="/Users/runner/.wasmedge/lib"
          export WASMEDGE_DIR="$(pwd)/../../"
          cargo test -p wasmedge-sdk --all --examples --features standalone
