name: test-install-script

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

on:
  push:
    branches:
      - master
    paths:
      - '.github/workflows/test-install-script.yml'
      - 'utils/install.sh'
      - 'utils/uninstall.sh'
  pull_request:
    branches:
      - master
    paths:
      - '.github/workflows/test-install-script.yml'
      - 'utils/install.sh'
      - 'utils/uninstall.sh'

jobs:
  linux:
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: CentOS 8 Stream
            host_runner: ubuntu-latest
            package_manager: yum
            docker_image: quay.io/centos/centos:stream8
          - name: CentOS 7
            host_runner: ubuntu-latest
            package_manager: yum
            docker_image: centos:7.9.2009
          - name: Ubuntu 20.04
            host_runner: ubuntu-latest
            package_manager: apt
            docker_image: ubuntu:20.04
          - name: Ubuntu 18.04
            host_runner: ubuntu-latest
            package_manager: apt
            docker_image: ubuntu:18.04
          - name: Ubuntu 16.04
            host_runner: ubuntu-latest
            package_manager: apt
            docker_image: ubuntu:16.04
          - name: manylinux2014 aarch64
            host_runner: ARM64
            package_manager: yum
            docker_image: wasmedge/wasmedge:manylinux2014_aarch64
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.host_runner }}
    container:
      image: ${{ matrix.docker_image }}

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Install git and wget
      run: |
        ${{ matrix.package_manager }} update -y
        ${{ matrix.package_manager }} install -y git curl
    - name: Install WasmEdge latest release
      run: |
        bash utils/install.sh -V
    - name: Uninstall WasmEdge
      run: |
        bash utils/uninstall.sh -q -V
    - name: Install WasmEdge latest release with all extensions
      run: |
        bash utils/install.sh -e all -V
    - name: Uninstall WasmEdge with all extensions
      run: |
        bash utils/uninstall.sh -q -V
    - name: Install WasmEdge specific release (0.8.2)
      run: |
        bash utils/install.sh -v 0.8.2 -V
    - name: Uninstall WasmEdge
      run: |
        bash utils/uninstall.sh -q -V
    - name: Install WasmEdge specific release (0.8.2) with all extensions
      run: |
        bash utils/install.sh -e all -v 0.8.2 -V
    - name: Install WasmEdge and test for arm extension installation
      run: |
        bash utils/install.sh -e all --version=0.9.1-beta.1 \
        --tf-version=0.9.1-beta.1 --tf-deps-version=0.9.1-beta.1  --tf-tools-version=0.9.1-beta.1  \
        --image-version=0.9.1-beta.1 --image-deps-version=0.9.1-beta.1
    - name: Uninstall WasmEdge with all extensions
      run: |
        bash utils/uninstall.sh -q -V
    - name: Install wasmedge-image-deps with 0.8.2
      run: |
        echo "$(bash utils/install.sh -e image -v 0.8.2 2>&1 | tee output.log)" | grep -qE *-deps-* && echo "Pass: Deps found in 0.8.2" \
        || echo "Failed: Deps not found in 0.8.2" && cat output.log
    - name: Uninstall WasmEdge with Image extensions
      run: |
        bash utils/uninstall.sh -q -V
    - name: Installs wasmedge-image-deps with 0.8.1
      run: |
        echo "$(bash utils/install.sh -e image -v 0.8.1 2>&1 | tee output.log)" | grep -qE *-deps-* && echo "Pass: Deps found in 0.8.1" \
        || echo "Failed: Deps not found in 0.8.1" && cat output.log
    - name: Uninstall WasmEdge with Image extensions
      run: |
        bash utils/uninstall.sh -q -V
    - name: Don't install wasmedge-image-deps with 0.9.0-rc.1
      run: |
        echo "$(bash utils/install.sh -e image -v 0.9.0-rc.1 2>&1 | tee output.log)" | grep -qE *-deps-* && echo "Failed: Deps found in 0.9.0-rc.1" \
        && cat output.log || echo "Pass: Deps not found in 0.9.0-rc.1"
    - name: Uninstall WasmEdge with Image extensions
      run: |
        bash utils/uninstall.sh -q -V
    - name: No Tensorflow tools from 0.9.0-rc.1
      run: |
        echo "$(bash utils/install.sh -e tf -v 0.9.0-rc.1 2>&1 | tee output.log)" | grep -qE *-tools-* && echo "Failed: tools found in 0.9.0-rc.1" \
        && cat output.log || echo "Pass: tools not found in 0.9.0-rc.1"
    - name: Uninstall WasmEdge
      run: |
        bash utils/uninstall.sh -q -V
    - name: Install versions multiple times
      run: |
        bash utils/install.sh -e all -V
        bash utils/install.sh -e all -v 0.9.0-rc.1 -V
        bash utils/install.sh -e all -v 0.8.1 -V
    - name: Uninstall WasmEdge with Image extensions
      run: |
        bash utils/uninstall.sh -q -V
    - name: Uninstall WasmEdge and Source Line removal check
      run: |
        bash utils/install.sh && bash utils/uninstall.sh -q
        grep -qE *.wasmedge/env* ~/.bashrc && echo "Failed: Source Lines found" || echo "Pass: Source Lines Removed"
        grep -qE *.wasmedge/env* ~/.bash_profile && echo "Failed: Source Lines found" || echo "Pass: Source Lines Removed"
        grep -qE *.wasmedge/env* ~/.profile && echo "Failed: Source Lines found" || echo "Pass: Source Lines Removed"
    - name: Plugins Install check
      run: |
        bash utils/install.sh -v 0.10.0-alpha.1
        ls ~/.wasmedge/plugin/ | grep .so && echo "Pass: Plugins found" || (echo "Fail: Plugins not found" && exit 1)
        bash utils/install.sh -v 0.10.0-alpha.1 -p ~/new_wasmedge
        ls ~/new_wasmedge/plugin/ | grep .so && echo "Pass: Plugins found" || (echo "Fail: Plugins not found" && exit 1)
        bash utils/install.sh -v 0.10.0-alpha.1 -p /usr
        ls /usr/lib/wasmedge/ | grep libwasmedgePluginWasmEdgeProcess.so && echo "Pass: Plugins found" || (echo "Fail: Plugins not found" && exit 1)
    - name: Image Extensions - Version Based Conditions check
      run: |
        VERSION_IM_DEPS=0.9.1
        # arch64
        [ "$(printf %s\\n%s\\n "0.9.1-beta.1" "$VERSION_IM_DEPS")" != "$(printf %s\\n%s "0.9.1-beta.1" "$VERSION_IM_DEPS" | awk '{ if ($1 ~ /-/) print; else print $0"_" ; }' | sort --version-sort | sed 's/_$//')" ] &&
          (echo "Fail: Sort failed" && exit 1) || echo "Pass: Extensions Compatible"
        
        VERSION_IM_DEPS=0.9.1-rc.1
        # arch64
        [ "$(printf %s\\n%s\\n "0.9.1-beta.1" "$VERSION_IM_DEPS")" != "$(printf %s\\n%s "0.9.1-beta.1" "$VERSION_IM_DEPS" | awk '{ if ($1 ~ /-/) print; else print $0"_" ; }' | sort --version-sort | sed 's/_$//')" ] &&
          (echo "Fail: Sort failed" && exit 1) || echo "Pass: Extensions Compatible"
        
        VERSION_IM_DEPS=0.9.1-beta.2
        # arch64
        [ "$(printf %s\\n%s\\n "0.9.1-beta.1" "$VERSION_IM_DEPS")" != "$(printf %s\\n%s "0.9.1-beta.1" "$VERSION_IM_DEPS" | awk '{ if ($1 ~ /-/) print; else print $0"_" ; }' | sort --version-sort | sed 's/_$//')" ] &&
          (echo "Fail: Sort failed" && exit 1) || echo "Pass: Extensions Compatible"
        
        VERSION_IM_DEPS=0.9.1-alpha.1
        # arch64
        [ "$(printf %s\\n%s\\n "0.9.1-beta.1" "$VERSION_IM_DEPS")" != "$(printf %s\\n%s "0.9.1-beta.1" "$VERSION_IM_DEPS" | awk '{ if ($1 ~ /-/) print; else print $0"_" ; }' | sort --version-sort | sed 's/_$//')" ] &&
          echo "Pass: Extensions incompatible" || (echo "Fail: Extensions Compatible" && exit 1)

        VERSION_IM_DEPS=0.8.1
        # Normal Test
        [ "$(printf %s\\n%s\\n "$VERSION_IM_DEPS" "0.8.2")" = "$(printf %s\\n%s "$VERSION_IM_DEPS" "0.8.2" | awk '{ if ($1 ~ /-/) print; else print $0"_" ; }' | sort --version-sort | sed 's/_$//')" ] &&
          echo "Pass: Image deps needed" || (echo "Fail: Image deps needed" && exit 1)
        
        VERSION_IM_DEPS=0.8.3
        # Normal Test
        [ "$(printf %s\\n%s\\n "$VERSION_IM_DEPS" "0.8.2")" = "$(printf %s\\n%s "$VERSION_IM_DEPS" "0.8.2" | awk '{ if ($1 ~ /-/) print; else print $0"_" ; }' | sort --version-sort | sed 's/_$//')" ] &&
          (echo "Fail: Image deps not needed" && exit 1) || echo "Pass: Image deps not needed"

        VERSION_IM_DEPS=0.8.2
        # Normal Test
        [ "$(printf %s\\n%s\\n "$VERSION_IM_DEPS" "0.8.2")" = "$(printf %s\\n%s "$VERSION_IM_DEPS" "0.8.2" | awk '{ if ($1 ~ /-/) print; else print $0"_" ; }' | sort --version-sort | sed 's/_$//')" ] &&
          echo "Pass: Image Needed" || (echo "Fail: Image deps needed" && exit 1)
    - name: Tensorflow Extensions - Version Based Conditions check
      run: |
        VERSION_TF_DEPS=0.9.1
        # arch64
        [ "$(printf %s\\n%s\\n "0.9.1-beta.1" "$VERSION_TF_DEPS")" != "$(printf %s\\n%s "0.9.1-beta.1" "$VERSION_TF_DEPS" | awk '{ if ($1 ~ /-/) print; else print $0"_" ; }' | sort --version-sort | sed 's/_$//')" ] &&
          (echo "Fail: Sort failed" && exit 1) || echo "Pass: Extensions Compatible"
        
        VERSION_TF_DEPS=0.9.1-rc.1
        # arch64
        [ "$(printf %s\\n%s\\n "0.9.1-beta.1" "$VERSION_TF_DEPS")" != "$(printf %s\\n%s "0.9.1-beta.1" "$VERSION_TF_DEPS" | awk '{ if ($1 ~ /-/) print; else print $0"_" ; }' | sort --version-sort | sed 's/_$//')" ] &&
          (echo "Fail: Sort failed" && exit 1) || echo "Pass: Extensions Compatible"
        
        VERSION_TF_DEPS=0.9.1-beta.2
        # arch64
        [ "$(printf %s\\n%s\\n "0.9.1-beta.1" "$VERSION_TF_DEPS")" != "$(printf %s\\n%s "0.9.1-beta.1" "$VERSION_TF_DEPS" | awk '{ if ($1 ~ /-/) print; else print $0"_" ; }' | sort --version-sort | sed 's/_$//')" ] &&
          (echo "Fail: Sort failed" && exit 1) || echo "Pass: Extensions Compatible"
        
        VERSION_TF_DEPS=0.9.1-alpha.1
        # arch64
        [ "$(printf %s\\n%s\\n "0.9.1-beta.1" "$VERSION_TF_DEPS")" != "$(printf %s\\n%s "0.9.1-beta.1" "$VERSION_TF_DEPS" | awk '{ if ($1 ~ /-/) print; else print $0"_" ; }' | sort --version-sort | sed 's/_$//')" ] &&
          echo "Pass: Extensions incompatible" || (echo "Fail: Sort failed" && exit 1)
    - name: Latest Release Check
      run: |
        _res_git_=$(git ls-remote --refs --tags "https://github.com/WasmEdge/WasmEdge.git" | cut -d '/' -f 3 | awk '{ if ($1 ~ /-/) print; else print $0"_" ; }' | sort --version-sort | sed 's/_$//' | grep -e '^[0-9]\+.[0-9]\+.[0-9]\+$' | tail -1)
        _res_curl_=$(curl --silent "https://api.github.com/repos/WasmEdge/WasmEdge/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/' )
        [ "$_res_git_" = "$_res_curl_" ] && echo "Pass: Fetched version equals release" ||
        (echo "Fail: Fetched version does not equal GitHub Ref\nFetched:$_res_git_\nCI:$_res_curl_" && exit 1)
        

  macos:
    strategy:
      matrix:
        include:
          - name: MacOS-latest
            host_runner: macos-latest
            package_manager: brew
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.host_runner }}

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Install WasmEdge latest release
      run: |
        bash utils/install.sh -V
    - name: Uninstall WasmEdge
      run: |
        bash utils/uninstall.sh -q -V
    - name: Install WasmEdge latest release with all extensions
      run: |
        bash utils/install.sh -e all -V
    - name: Uninstall WasmEdge with all extensions
      run: |
        bash utils/uninstall.sh -q -V
    - name: Install WasmEdge specific release (0.8.2)
      run: |
        bash utils/install.sh -v 0.8.2 -V
    - name: Uninstall WasmEdge
      run: |
        bash utils/uninstall.sh -q -V
    - name: Install WasmEdge specific release (0.8.2) with all extensions
      run: |
        bash utils/install.sh -e all -v 0.8.2 -V
    - name: Uninstall WasmEdge with all extensions
      run: |
        bash utils/uninstall.sh -q -V
    - name: Plugins Install check
      run: |
        bash utils/install.sh -v 0.10.0-alpha.1
        ls ~/.wasmedge/plugin/ | grep .dylib && echo "Pass: Plugins found" || (echo "Fail: Plugins not found" && exit 1)
        bash utils/install.sh -v 0.10.0-alpha.1 -p ~/new_wasmedge
        ls ~/new_wasmedge/plugin/ | grep .dylib && echo "Pass: Plugins found" || (echo "Fail: Plugins not found" && exit 1)
        # MacOS container does not have access for /usr directory
        # bash utils/install.sh -v 0.10.0-alpha.1 -p /usr
        # ls /usr/lib/wasmedge/ | grep libwasmedgePluginWasmEdgeProcess.dylib && echo "Pass: Plugins found" || (echo "Fail: Plugins not found" && exit 1)
    - name: Image Extensions - Version Based Conditions check
      run: |
        VERSION_IM_DEPS=0.10.0
        # Darwin test
        [ "$(printf %s\\n%s\\n "0.10.0-alpha.1" "$VERSION_IM_DEPS")" != "$(printf %s\\n%s "0.10.0-alpha.1" "$VERSION_IM_DEPS" | awk '{ if ($1 ~ /-/) print; else print $0"_" ; }' | sort --version-sort | sed 's/_$//')" ] &&
          (echo "Fail: Sort failed" && exit 1) || echo "Pass: Extensions Compatible"
        
        VERSION_IM_DEPS=0.10.0-alpha.2
        # Darwin test
        [ "$(printf %s\\n%s\\n "0.10.0-alpha.1" "$VERSION_IM_DEPS")" != "$(printf %s\\n%s "0.10.0-alpha.1" "$VERSION_IM_DEPS" | awk '{ if ($1 ~ /-/) print; else print $0"_" ; }' | sort --version-sort | sed 's/_$//')" ] &&
          (echo "Fail: Sort failed" && exit 1) || echo "Pass: Extensions Compatible"
        
        VERSION_IM_DEPS=0.9.1
        # Darwin test
        [ "$(printf %s\\n%s\\n "0.10.0-alpha.1" "$VERSION_IM_DEPS")" != "$(printf %s\\n%s "0.10.0-alpha.1" "$VERSION_IM_DEPS" | awk '{ if ($1 ~ /-/) print; else print $0"_" ; }' | sort --version-sort | sed 's/_$//')" ] &&
          echo "Pass: Extensions incompatible" || (echo "Fail: Extensions Compatible"  && exit 1)
    - name: Tensorflow Extensions - Version Based Conditions check
      run: |
        VERSION_TF=0.10.0-alpha.1
        # Darwin
        [ "$(printf %s\\n%s\\n "0.10.0-alpha.1" "$VERSION_TF")" != "$(printf %s\\n%s "0.10.0-alpha.1" "$VERSION_TF" | awk '{ if ($1 ~ /-/) print; else print $0"_" ; }' | sort --version-sort | sed 's/_$//')" ] &&
        (echo "Fail: Extensions incompatible" && exit 1) || echo "Pass: Extensions compatible"

        VERSION_TF=0.10.0-alpha.2
        # Darwin
        [ "$(printf %s\\n%s\\n "0.10.0-alpha.1" "$VERSION_TF")" != "$(printf %s\\n%s "0.10.0-alpha.1" "$VERSION_TF" | awk '{ if ($1 ~ /-/) print; else print $0"_" ; }' | sort --version-sort | sed 's/_$//')" ] &&
        (echo "Fail: Extensions incompatible" && exit 1) || echo "Pass: Extensions compatible"

        VERSION_TF=0.10.0-rc.1
        # Darwin
        [ "$(printf %s\\n%s\\n "0.10.0-alpha.1" "$VERSION_TF")" != "$(printf %s\\n%s "0.10.0-alpha.1" "$VERSION_TF" | awk '{ if ($1 ~ /-/) print; else print $0"_" ; }' | sort --version-sort | sed 's/_$//')" ] &&
        (echo "Fail: Extensions incompatible" && exit 1) || echo "Pass: Extensions compatible"

        VERSION_TF=0.10.0
        # Darwin
        [ "$(printf %s\\n%s\\n "0.10.0-alpha.1" "$VERSION_TF")" != "$(printf %s\\n%s "0.10.0-alpha.1" "$VERSION_TF" | awk '{ if ($1 ~ /-/) print; else print $0"_" ; }' | sort --version-sort | sed 's/_$//')" ] &&
        (echo "Fail: Extensions incompatible" && exit 1) || echo "Pass: Extensions compatible"

        VERSION_TF=0.9.1
        # Darwin
        [ "$(printf %s\\n%s\\n "0.10.0-alpha.1" "$VERSION_TF")" != "$(printf %s\\n%s "0.10.0-alpha.1" "$VERSION_TF" | awk '{ if ($1 ~ /-/) print; else print $0"_" ; }' | sort --version-sort | sed 's/_$//')" ] &&
        echo "Pass: Extensions incompatible" || (echo "Fail: Extensions Compatible" && exit 1)
    - name: Latest Release Check
      run: |
        _res_git_=$(git ls-remote --refs --tags "https://github.com/WasmEdge/WasmEdge.git" | cut -d '/' -f 3 | awk '{ if ($1 ~ /-/) print; else print $0"_" ; }' | sort --version-sort | sed 's/_$//' | grep -e '^[0-9]\+.[0-9]\+.[0-9]\+$' | tail -1)
        _res_curl_=$(curl --silent "https://api.github.com/repos/WasmEdge/WasmEdge/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/' )
        [ "$_res_git_" = "$_res_curl_" ] && echo "Pass: Fetched version equals release" ||
        (echo "Fail: Fetched version does not equal GitHub Ref\nFetched:$_res_git_\nCI:$_res_curl_" && exit 1)

    - name: Ignore brew option check
      run: |
        NONINTERACTIVE=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/uninstall.sh)"
        echo $(bash utils/install.sh -V) | grep "Brew is required" && echo "Pass:It requires brew" ||
          echo "Fail:It should exit with error"
        bash utils/install.sh -V --ignore-brew
