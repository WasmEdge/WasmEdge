name: Installers

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

on:
  push:
    branches:
      - master
    paths:
      - '.github/workflows/test-installers.yml'
      - 'utils/install.sh'
      - 'utils/install_v2.sh'
      - 'utils/install.py'
      - 'utils/uninstall.sh'
  pull_request:
    branches:
      - master
    paths:
      - '.github/workflows/test-installers.yml'
      - 'utils/install.sh'
      - 'utils/install_v2.sh'
      - 'utils/install.py'
      - 'utils/uninstall.sh'

permissions:
  contents: read

env:
  # Common test version constants
  # Please update these versions when necessary
  TEST_VERSION: "0.14.1"
  TEST_228_VERSION: "0.15.0"
  DEPRECATED_TEST_VERSION: "0.9.0"

jobs:
  # Get latest release version
  get-latest-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Get latest release version
        id: get-version
        run: |
          LATEST_VERSION=$(curl -w "%{url_effective}\n" -I -L -s -S https://github.com/WasmEdge/WasmEdge/releases/latest -o /dev/null | grep -Eo '[0-9]+\.[0-9]+\.[0-9]+')
          echo "Latest WasmEdge release: ${LATEST_VERSION}"
          echo "version=${LATEST_VERSION}" >> ${GITHUB_OUTPUT}

  # Python code formatting check
  lint-python:
    runs-on: ubuntu-latest
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Setup Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0

      - name: Install Black Formatter
        run: pip install black

      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Check Python Code Formatting
        run: |
            black --check --verbose --diff ./utils/install.py

  # Test install.sh on Linux containers
  test-install-sh-linux:
    needs: get-latest-version
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Ubuntu 20.04 x64
            runner: ubuntu-latest
            image: ubuntu:20.04
            pkg_mgr: apt
          - name: Ubuntu 20.04 arm64
            runner: ubuntu-24.04-arm
            image: ubuntu:20.04
            pkg_mgr: apt
          - name: manylinux_2_28 x86_64
            runner: ubuntu-24.04
            image: wasmedge/wasmedge:manylinux_2_28_x86_64
            pkg_mgr: yum
          - name: manylinux_2_28 aarch64
            runner: ubuntu-24.04-arm
            image: wasmedge/wasmedge:manylinux_2_28_aarch64
            pkg_mgr: yum

    name: install.sh ${{ matrix.name }}
    runs-on: ${{ matrix.runner }}
    container:
      image: ${{ matrix.image }}

    steps:
    - name: Harden Runner
      uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
      with:
        egress-policy: audit

    - name: Checkout code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        fetch-depth: 0

    - name: Install System Dependencies
      run: |
        ${{ matrix.pkg_mgr }} update -y
        ${{ matrix.pkg_mgr }} install -y git curl python2 python3

    - name: Test install.sh Functionality
      run: |
        # Source helper functions
        . ./.github/scripts/installer-test-helpers.sh

        # Use the local install.py script
        export INSTALL_PY_PATH="$(pwd)/utils/install.py"

        # Use latest release version from previous job
        LATEST_VERSION="${{ needs.get-latest-version.outputs.version }}"
        echo "Latest WasmEdge release: ${LATEST_VERSION}"

        # Test latest release installation
        printf "\n=== Test 1: Latest release installation ===\n"
        bash utils/install.sh -D
        source ~/.wasmedge/env 2>/dev/null || source ~/.bashrc 2>/dev/null || true
        verify_version "${LATEST_VERSION}"
        bash utils/uninstall.sh -q -V

        # Test plugin installation
        printf "\n=== Test 2: Specific version with plugin ===\n"
        bash utils/install.sh -v ${TEST_VERSION} --plugins wasi_nn-ggml -D
        source ~/.wasmedge/env 2>/dev/null || source ~/.bashrc 2>/dev/null || true
        verify_version "${TEST_VERSION}"
        verify_plugin "libwasmedgePluginWasiNN.so"
        bash utils/uninstall.sh -q -V

        # Test manylinux_2_28 installation
        printf "\n=== Test 3: Specific version >= ${TEST_228_VERSION} ===\n"
        bash utils/install.sh -v ${TEST_228_VERSION} --dist manylinux_2_28 --plugins wasi_nn-ggml -D
        source ~/.wasmedge/env 2>/dev/null || source ~/.bashrc 2>/dev/null || true
        verify_version "${TEST_228_VERSION}"
        verify_plugin "libwasmedgePluginWasiNN.so"
        bash utils/uninstall.sh -q -V

  # Test install.sh on macOS
  test-install-sh-macos:
    needs: get-latest-version
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: macOS x86_64
            runner: macos-13
          - name: macOS arm64
            runner: macos-15

    name: install.sh ${{ matrix.name }}
    runs-on: ${{ matrix.runner }}

    steps:
    - name: Harden Runner
      uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
      with:
        egress-policy: audit

    - name: Checkout code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        fetch-depth: 0

    - name: Install Zsh
      run: |
        eval $(/opt/homebrew/bin/brew shellenv) 2>/dev/null || true
        brew install zsh

    - name: Test install.sh Functionality
      run: |
        # Source helper functions
        . ./.github/scripts/installer-test-helpers.sh

        # Use the local install.py script
        export INSTALL_PY_PATH="$(pwd)/utils/install.py"

        # Backup contents of existing .bash_profile (if any)
        [ -e ~/.bash_profile ] && cp ~/.bash_profile ~/.dummy_bash_source
        # Remove existing .bash_profile (file or symlink)
        rm -f ~/.bash_profile
        # Create symlink pointing to dummy source
        ln -s ~/.dummy_bash_source ~/.bash_profile

        # Use latest release version from previous job
        LATEST_VERSION="${{ needs.get-latest-version.outputs.version }}"
        echo "Latest WasmEdge release: ${LATEST_VERSION}"

        # Test latest release installation
        printf "\n=== Test: Latest release installation ===\n"
        bash utils/install.sh -D
        source ~/.wasmedge/env 2>/dev/null || source ~/.bashrc 2>/dev/null || true
        verify_version "${LATEST_VERSION}"
        bash utils/uninstall.sh -q -V
        # Test if the environment variable was removed
        IPATH="$HOME/.wasmedge"
        for file in "$HOME/.zshrc" "$HOME/.bash_profile"; do
        [ -f "$file" ] || continue
        if grep -q ". \"$IPATH/env\"" "$file"; then
          echo "✗ Found WasmEdge source line in: $file"
          echo "✗ Uninstallation failed"
          exit 1
        fi
        done

  # Test install_v2.sh
  test-install-v2:
    needs: get-latest-version
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: CentOS 9 Stream
            runner: ubuntu-latest
            image: quay.io/centos/centos:stream9
            setup: yum update -y && yum install -y which
          - name: Ubuntu 20.04
            runner: ubuntu-latest
            image: ubuntu:20.04
            setup: apt update -y && apt install -y curl
            test_noavx: true

    name: install_v2.sh ${{ matrix.name }}
    runs-on: ${{ matrix.runner }}
    container:
      image: ${{ matrix.image }}

    steps:
    - name: Harden Runner
      uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
      with:
        egress-policy: audit

    - name: Checkout code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        fetch-depth: 0

    - name: Setup System Requirements
      run: ${{ matrix.setup }}

    - name: Test install_v2.sh Functionality
      shell: bash
      run: |
        # Source helper functions
        . ./.github/scripts/installer-test-helpers.sh

        # Basic installation with GGML plugin (install_v2.sh defaults to ${TEST_VERSION})
        printf "\n=== Test 1: Basic installation ===\n"
        bash utils/install_v2.sh -V
        verify_plugin "libwasmedgePluginWasiNN.so"

        source ~/.wasmedge/env
        # Note: install_v2.sh currently defaults to ${TEST_VERSION}, not the latest version
        INSTALLED_VERSION=$(wasmedge -v | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' | head -1)
        if [[ "${INSTALLED_VERSION}" == "${TEST_VERSION}" ]]; then
          echo "✓ Version: ${TEST_VERSION} (install_v2.sh default)"
        else
          echo "✗ Version mismatch: expected ${TEST_VERSION}, got ${INSTALLED_VERSION}"
          exit 1
        fi

        # Test re-installation
        printf "\n=== Test 2: Re-installation ===\n"
        bash utils/install_v2.sh -V
        verify_plugin "libwasmedgePluginWasiNN.so"

        # Test specific version with custom GGML build
        printf "\n=== Test 3: Custom GGML build ===\n"
        bash utils/install_v2.sh -V --version=${TEST_VERSION} --ggmlbn=b5640
        verify_plugin "libwasmedgePluginWasiNN.so"

        # Test uninstallation
        bash utils/uninstall.sh -q -V

    - name: Test NoAVX Installation
      if: ${{ matrix.test_noavx }}
      run: |
        # Source helper functions
        . ./.github/scripts/installer-test-helpers.sh

        echo "=== Test: NoAVX installation ==="
        bash utils/install_v2.sh -V --noavx
        verify_plugin "libwasmedgePluginWasiNN.so"
        bash utils/uninstall.sh -q -V

  # Test install_v2.sh on macOS
  test-install-v2-sh-macos:
    needs: get-latest-version
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: macOS Intel
            runner: macos-13
          - name: macOS Apple Silicon
            runner: macos-15

    name: install_v2.sh ${{ matrix.name }}
    runs-on: ${{ matrix.runner }}

    steps:
    - name: Harden Runner
      uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
      with:
        egress-policy: audit

    - name: Checkout code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        fetch-depth: 0

    - name: Install Zsh
      run: |
        eval $(/opt/homebrew/bin/brew shellenv) 2>/dev/null || true
        brew install zsh

    - name: Test install_v2.sh Functionality
      shell: bash
      run: |
        # Source helper functions
        . ./.github/scripts/installer-test-helpers.sh
        
        # Backup contents of existing .bash_profile (if any)
        [ -e ~/.bash_profile ] && cp ~/.bash_profile ~/.dummy_bash_source
        # Remove existing .bash_profile (file or symlink)
        rm -f ~/.bash_profile
        # Create symlink pointing to dummy source
        ln -s ~/.dummy_bash_source ~/.bash_profile
        
        # Basic installation with GGML plugin (install_v2.sh defaults to ${TEST_VERSION})
        echo "=== Test: Basic installation ==="
        bash utils/install_v2.sh -V
        verify_plugin "libwasmedgePluginWasiNN.dylib"

        source ~/.wasmedge/env 2>/dev/null || source ~/.bashrc 2>/dev/null || true

        # Note: install_v2.sh currently defaults to ${TEST_VERSION}, not the latest version
        INSTALLED_VERSION=$(~/.wasmedge/bin/wasmedge --version | grep -Eo '[0-9]+\.[0-9]+\.[0-9]+' | head -1)
        echo "Installed version: ${INSTALLED_VERSION}"

        if [ "${INSTALLED_VERSION}" = "${TEST_VERSION}" ]; then
          echo "✓ Version: ${TEST_VERSION} (install_v2.sh default)"
        else
          echo "✗ Version mismatch: expected ${TEST_VERSION}, got ${INSTALLED_VERSION}"
          exit 1
        fi

        bash utils/uninstall.sh -q -V
        # Test if the environment variable was removed
        IPATH="$HOME/.wasmedge"
        for file in "$HOME/.zshrc" "$HOME/.bash_profile"; do
          [ -f "$file" ] || continue
          if grep -q ". \"$IPATH/env\"" "$file"; then
            echo "✗ Found WasmEdge source line in: $file"
            echo "✗ Uninstallation failed"
            exit 1
          fi
        done

  # Test install.py with comprehensive features
  test-install-py:
    needs: get-latest-version
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Ubuntu 20.04
            runner: ubuntu-latest
            image: ubuntu:20.04
            pkg_mgr: apt
            setup: apt update && apt install -y lsb-release
            test_plugins: true
          - name: manylinux_2_28 aarch64
            runner: ubuntu-24.04-arm
            image: wasmedge/wasmedge:manylinux_2_28_aarch64
            pkg_mgr: yum
            setup: echo "No extra setup"

    name: install.py ${{ matrix.name }}
    runs-on: ${{ matrix.runner }}
    container:
      image: ${{ matrix.image }}

    steps:
    - name: Harden Runner
      uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
      with:
        egress-policy: audit

    - name: Checkout code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        fetch-depth: 0

    - name: Install System Dependencies
      run: |
        ${{ matrix.setup }}
        ${{ matrix.pkg_mgr }} update -y
        ${{ matrix.pkg_mgr }} install -y git curl python2 python3

    - name: Test install.py Functionality
      run: |
        # Source helper functions
        . ./.github/scripts/installer-test-helpers.sh

        # Use latest release version from previous job
        LATEST_VERSION="${{ needs.get-latest-version.outputs.version }}"
        echo "Latest WasmEdge release: ${LATEST_VERSION}"

        for python_cmd in python2 python3; do
          printf "\n=== Testing with ${python_cmd} ===\n"

          # Test latest release
          echo "Test 1: Latest release"
          ${python_cmd} utils/install.py -D
          source ~/.wasmedge/env 2>/dev/null || source ~/.bashrc 2>/dev/null || true
          verify_version "${LATEST_VERSION}"
          bash utils/uninstall.sh -q -V

          # Test specific version
          echo "Test 2: Specific version"
          ${python_cmd} utils/install.py -v ${TEST_VERSION} -D
          verify_version "${TEST_VERSION}"
          bash utils/uninstall.sh -q -V

          # Test deprecated version handling
          echo "Test 3: Deprecated version handling"
          ${python_cmd} utils/install.py -v ${DEPRECATED_TEST_VERSION} -D 2>&1 | grep -q "Version not supported. Min Version: 0.13.0" && \
            echo "✓ Version validation works" || (echo "✗ Version validation failed" && exit 1)
        done

    - name: Test Plugin Installations
      if: ${{ matrix.test_plugins }}
      run: |
        # Source helper functions
        . ./.github/scripts/installer-test-helpers.sh

        for python_cmd in python2 python3; do
          printf "\n=== Plugin tests with ${python_cmd} ===\n"

          # Test TensorFlow plugin
          echo "Test 1: TensorFlow plugin"
          ${python_cmd} utils/install.py -v ${TEST_VERSION} --plugins wasmedge_tensorflow -D
          verify_version "${TEST_VERSION}"
          verify_plugin "libwasmedgePluginWasmEdgeTensorflow.so"
          bash utils/uninstall.sh -q -V

          # Test WASI-NN GGML plugin
          echo "Test 2: WASI-NN GGML plugin"
          ${python_cmd} utils/install.py -v ${TEST_VERSION} --plugins wasi_nn-ggml -D
          verify_version "${TEST_VERSION}"
          verify_plugin "libwasmedgePluginWasiNN.so"
          bash utils/uninstall.sh -q -V
        done

  # Test install.py on macOS
  test-install-py-macos:
    needs: get-latest-version
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: macOS Intel
            runner: macos-13
          - name: macOS Apple Silicon
            runner: macos-15

    name: install.py on ${{ matrix.name }}
    runs-on: ${{ matrix.runner }}

    steps:
    - name: Harden Runner
      uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
      with:
        egress-policy: audit

    - name: Checkout code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        fetch-depth: 0

    - name: Install Python and Zsh
      shell: zsh {0}
      run: |
        eval $(/opt/homebrew/bin/brew shellenv) 2>/dev/null || true
        brew upgrade
        brew install python zsh

    - name: Test install.py Functionality
      shell: zsh {0}
      run: |
        # Source helper functions
        . ./.github/scripts/installer-test-helpers.sh

        # Use latest release version from previous job
        LATEST_VERSION="${{ needs.get-latest-version.outputs.version }}"
        echo "Latest WasmEdge release: ${LATEST_VERSION}"

        # Test latest release
        printf "\n=== Test 1: Latest release ===\n"
        python3 utils/install.py -D
        source ~/.wasmedge/env 2>/dev/null || source ~/.bashrc 2>/dev/null || true
        verify_version "${LATEST_VERSION}"
        bash utils/uninstall.sh -q -V

        # Test specific version
        printf "\n=== Test 2: Specific version ===\n"
        python3 utils/install.py -v ${TEST_VERSION} -D
        verify_version "${TEST_VERSION}"
        bash utils/uninstall.sh -q -V

        # Test deprecated version handling
        printf "\n=== Test 3: Deprecated version handling ===\n"
        python3 utils/install.py -v ${DEPRECATED_TEST_VERSION} -D 2>&1 | grep -q "Version not supported. Min Version: 0.13.0" && \
          echo "✓ Version validation works" || (echo "✗ Version validation failed" && exit 1)

    - name: Test Plugin Installations
      shell: zsh {0}
      run: |
        # Source helper functions
        . ./.github/scripts/installer-test-helpers.sh

        echo "=== Test: TensorFlow plugin ==="
        python3 utils/install.py -v ${TEST_VERSION} --plugins wasmedge_tensorflow -D
        verify_version "${TEST_VERSION}"
        verify_plugin "libwasmedgePluginWasmEdgeTensorflow.dylib"
        bash utils/uninstall.sh -q -V
