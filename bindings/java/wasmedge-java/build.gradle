import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'checkstyle'

group = 'com.wasmedge'
version = '0.1'

repositories {
    mavenCentral()
}

configurations {
    checkstyleConfig
}

checkstyle {
    toolVersion = '10.5.0'
    configFile = file("$projectDir/config/checkstyle/checkstyle.xml")
    showViolations = true
    ignoreFailures = false
    checkstyleTest.enabled = false
}

dependencies {
    testImplementation('junit:junit:4.13.2')
}

sourceSets {
    main {
        resources {
            srcDirs "build/properties", "build/native/lib"
        }
    }
}

task generateProperties() {
    def output = new File(project.buildDir, "properties/wasmedge-java.properties")
    outputs.file(output)

    doLast {
        def props = new Properties()
        props.setProperty("jnilib.version", "${project.version}")
        props.store(output.newOutputStream(), null)
    }
}

compileJava {
    options.compilerArgs += ["-h", file("wasmedge-jni/jni/")]
}

task compileJNI {
    dependsOn compileJava

    doLast {
        exec {
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                println("=========WINDOWS============");
                commandLine 'cmd', '-c', 'mkdir -p build/native && cd build/ && cmake -Bnative -GNinja -DCMAKE_BUILD_TYPE=Release "-DCMAKE_SYSTEM_VERSION=$cmake_sys_version" -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreadedDLL "-DLLVM_DIR=$llvm_dir" -DWASMEDGE_BUILD_PACKAGE="ZIP" ../wasmedge-jni && dir /s . && cmake --build native'
            } else if (Os.isFamily(Os.FAMILY_MAC) || Os.isFamily(Os.FAMILY_UNIX)) {
                println("=========MAC OR LINUX============");
                commandLine 'sh', '-c', 'mkdir -p build/native && cd build/native && cmake ../../wasmedge-jni && make'
            } else {
                println("=========INVALID OS ============");
            }
        }
    }
}

clean.doFirst {
    delete fileTree('wasmedge-jni/jni') {
        include '*.h'
    }
}

processResources {
    dependsOn compileJNI
}


tasks.withType(Test) {
    systemProperty "java.library.path", "build/native/"
    testLogging.showStandardStreams = false
}

static def osType() {
    def os = System.getProperty("os.name").toLowerCase()
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        return "windows"
    }
    if (Os.isFamily(Os.FAMILY_MAC)) {
        return "macos"
    }
    if (Os.isFamily(Os.FAMILY_UNIX)){
        return "linux"
    }
    throw new RuntimeException("platform not supported: " + System.getProperty("os.name"))
}

task copyJniLib(type: Copy) {
    dependsOn 'compileJNI'
    from "build/native"
    include '*.so', '*.dylib', '*.dll'
    rename "^(lib)?wasmedge_jni", "\$1wasmedge_jni_${project.version}_${osType()}"
    into new File(project.buildDir, "native/lib")
}

processResources {
    dependsOn 'generateProperties', 'copyJniLib'
}

task platformJar(type : Jar) {
    destinationDirectory.set(file("${project.buildDir}/releases"))
    dependsOn 'jar'
    archiveClassifier.set(osType())
    with jar
}
