from typing import Any, ClassVar, overload

Annotations: Proposal
BulkMemoryOperations: Proposal
Const: Mutability
ExceptionHandling: Proposal
ExternRef: RefType
F32: Type
F64: Type
Func: ExternalType
FuncRef: RefType
FunctionReferences: Proposal
Glob: ExternalType
I32: Type
I64: Type
ImportExportMutGlobals: Proposal
Mem: ExternalType
Memory64: Proposal
Native: CompilerOutput
NonTrapFloatToIntConversions: Proposal
O0: Optimization
O1: Optimization
O2: Optimization
O3: Optimization
Os: Optimization
Oz: Optimization
ReferenceTypes: Proposal
SIMD: Proposal
Tab: ExternalType
TailCall: Proposal
Threads: Proposal
V128: Type
Var: Mutability
Wasi: Host
Wasm: CompilerOutput
WasmEdge: Host

class ASTModule:
    def __init__(self) -> None: ...
    def ListExports(self, arg0: int) -> list: ...
    def ListExportsLength(self) -> int: ...
    def ListImports(self, arg0: int) -> list: ...
    def ListImportsLength(self) -> int: ...

class Async:
    def __init__(self) -> None: ...
    def Cancel(self) -> None: ...
    def Get(self, arg0: int) -> tuple: ...
    def GetReturnsLength(self) -> int: ...
    def Wait(self) -> None: ...
    def WaitFor(self, arg0: int) -> bool: ...

class Compiler:
    def __init__(self, arg0: Configure) -> None: ...
    def Compile(self, arg0: str, arg1: str) -> Result: ...

class CompilerOutput:
    __members__: ClassVar[dict] = ...  # read-only
    Native: ClassVar[CompilerOutput] = ...
    Wasm: ClassVar[CompilerOutput] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class Configure:
    def __init__(self) -> None: ...
    def AddHostRegistration(self, arg0: Host) -> None: ...
    def AddProposal(self, arg0: Proposal) -> None: ...
    def CompilerGetOptimizationLevel(self) -> Optimization: ...
    def CompilerGetOutputFormat(self) -> CompilerOutput: ...
    def CompilerIsDumpIR(self) -> bool: ...
    def CompilerIsGenericBinary(self) -> bool: ...
    def CompilerIsInterruptible(self) -> bool: ...
    def CompilerSetDumpIR(self, arg0: bool) -> None: ...
    def CompilerSetGenericBinary(self, arg0: bool) -> None: ...
    def CompilerSetInterruptible(self, arg0: bool) -> None: ...
    def CompilerSetOptimizationLevel(self, arg0: Optimization) -> None: ...
    def CompilerSetOutputFormat(self, arg0: CompilerOutput) -> None: ...
    def GetMaxMemoryPage(self) -> int: ...
    def HasHostRegistration(self, arg0: Host) -> bool: ...
    def HasProposal(self, arg0: Proposal) -> bool: ...
    def RemoveHostRegistration(self, arg0: Host) -> None: ...
    def RemoveProposal(self, arg0: Proposal) -> None: ...
    def SetMaxMemoryPage(self, arg0: int) -> None: ...
    def StatisticsIsCostMeasuring(self) -> bool: ...
    def StatisticsIsInstructionCounting(self) -> bool: ...
    def StatisticsIsTimeMeasuring(self) -> bool: ...
    def StatisticsSetCostMeasuring(self, arg0: bool) -> None: ...
    def StatisticsSetInstructionCounting(self, arg0: bool) -> None: ...
    def StatisticsSetTimeMeasuring(self, arg0: bool) -> None: ...

class Executor:
    def __init__(self, arg0: Configure) -> None: ...
    def RegisterImport(self, arg0: Store, arg1) -> Result: ...
    def RegisterModule(
        self, arg0: Store, arg1: ASTModule, arg2: str
    ) -> Result: ...
    def instantiate(self, arg0: Store, arg1: ASTModule) -> Result: ...
    def invoke(self, arg0: Store, arg1: str, arg2: list) -> tuple: ...

class ExportType:
    def __init__(self) -> None: ...
    def GetExternalName(self) -> str: ...
    def GetExternalType(self) -> ExternalType: ...
    def GetFunctionType(self, *args, **kwargs) -> Any: ...
    def GetGlobalType(self, *args, **kwargs) -> Any: ...
    def GetMemoryType(self, *args, **kwargs) -> Any: ...

class ExternalType:

    __members__: ClassVar[dict] = ...  # read-only
    Func: ClassVar[ExternalType] = ...
    Glob: ClassVar[ExternalType] = ...
    Mem: ClassVar[ExternalType] = ...
    Tab: ClassVar[ExternalType] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class Function:
    def __init__(
        self, arg0: FunctionType, arg1: function, arg2: int
    ) -> None: ...
    def GetType(self) -> FunctionType: ...

class FunctionType:
    def __init__(self, arg0: list, arg1: list) -> None: ...
    def GetParamLen(self) -> int: ...
    def GetParamTypes(self, arg0: int) -> list: ...
    def GetRetLen(self) -> int: ...
    def GetRetTypes(self, arg0: int) -> list: ...

class Global:
    def __init__(self) -> None: ...
    def GetGlobalType(self) -> GlobalType: ...
    def GetValue(self) -> Value: ...
    def SetValue(self, arg0: Value) -> None: ...

class GlobalType:
    def __init__(self, arg0: Type, arg1: Mutability) -> None: ...
    def GetMutability(self) -> Mutability: ...
    def GetValType(self) -> Type: ...

class Host:
    __members__: ClassVar[dict] = ...  # read-only
    Wasi: ClassVar[Host] = ...
    WasmEdge: ClassVar[Host] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class ImportObject:
    @overload
    def __init__(self, arg0: str) -> None: ...
    @overload
    def __init__(self, arg0: tuple, arg1: tuple, arg2: tuple) -> None: ...
    @overload
    def __init__(self, arg0: tuple, arg1: bool) -> None: ...
    def AddFunction(self, arg0: str, arg1: Function) -> None: ...
    def AddGlobal(self, arg0: str, arg1) -> None: ...
    def AddMemory(self, arg0: str, arg1) -> None: ...
    def AddTable(self, arg0: str, arg1) -> None: ...
    def InitWASI(self, arg0: tuple, arg1: tuple, arg2: tuple) -> None: ...
    def InitWasmEdgeProcess(self, arg0: tuple, arg1: bool) -> None: ...
    def WASIGetExitCode(self) -> int: ...

class ImportType:
    def __init__(self) -> None: ...
    def GetExternalName(self) -> str: ...
    def GetExternalType(self) -> ExternalType: ...
    def GetFunctionType(self, arg0: ASTModule) -> FunctionType: ...
    def GetGlobalType(self, *args, **kwargs) -> Any: ...
    def GetMemoryType(self, *args, **kwargs) -> Any: ...
    def GetModuleName(self) -> str: ...
    def GetTableType(self, *args, **kwargs) -> Any: ...

class Limit:
    def __init__(self, arg0: bool, arg1: int, arg2: int) -> None: ...
    @property
    def HasMax(self) -> bool: ...
    @property
    def Max(self) -> int: ...
    @property
    def Min(self) -> int: ...

class Loader:
    def __init__(self, arg0: Configure) -> None: ...
    @overload
    def parse(self, arg0: ASTModule, arg1: str) -> Result: ...
    @overload
    def parse(self, arg0: ASTModule, arg1: tuple) -> Result: ...

class Logging:
    def __init__(self) -> None: ...
    def debug(self, *args, **kwargs) -> Any: ...
    def error(self, *args, **kwargs) -> Any: ...

class Memory:
    def __init__(self, arg0: MemoryType) -> None: ...
    def GetData(self, arg0: int, arg1: int) -> tuple: ...
    def GetMemoryType(self) -> MemoryType: ...
    def GetPageSize(self) -> int: ...
    def GrowPage(self, arg0: int) -> Result: ...
    def SetData(self, arg0: tuple, arg1: int) -> Result: ...

class MemoryType:
    def __init__(self, arg0: Limit) -> None: ...
    def GetLimit(self) -> Limit: ...

class Mutability:
    __members__: ClassVar[dict] = ...  # read-only
    Const: ClassVar[Mutability] = ...
    Var: ClassVar[Mutability] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class Optimization:
    __members__: ClassVar[dict] = ...  # read-only
    O0: ClassVar[Optimization] = ...
    O1: ClassVar[Optimization] = ...
    O2: ClassVar[Optimization] = ...
    O3: ClassVar[Optimization] = ...
    Os: ClassVar[Optimization] = ...
    Oz: ClassVar[Optimization] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class Proposal:
    __members__: ClassVar[dict] = ...  # read-only
    Annotations: ClassVar[Proposal] = ...
    BulkMemoryOperations: ClassVar[Proposal] = ...
    ExceptionHandling: ClassVar[Proposal] = ...
    FunctionReferences: ClassVar[Proposal] = ...
    ImportExportMutGlobals: ClassVar[Proposal] = ...
    Memory64: ClassVar[Proposal] = ...
    NonTrapFloatToIntConversions: ClassVar[Proposal] = ...
    ReferenceTypes: ClassVar[Proposal] = ...
    SIMD: ClassVar[Proposal] = ...
    TailCall: ClassVar[Proposal] = ...
    Threads: ClassVar[Proposal] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class RefType:
    __members__: ClassVar[dict] = ...  # read-only
    ExternRef: ClassVar[RefType] = ...
    FuncRef: ClassVar[RefType] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class Result:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: int) -> None: ...
    def code(self) -> int: ...
    def message(self) -> str: ...
    def __bool__(self) -> bool: ...

class Statistics:
    def __init__(self) -> None: ...
    def GetInstrCount(self) -> int: ...
    def GetInstrPerSecond(self) -> float: ...
    def GetTotalCost(self) -> int: ...
    def SetCostLimit(self, arg0: int) -> None: ...
    def SetCostTable(self, arg0: tuple) -> None: ...

class Store:
    def __init__(self) -> None: ...
    def FindFunction(self, *args, **kwargs) -> Any: ...
    def FindFunctionRegistered(self, *args, **kwargs) -> Any: ...
    def FindGlobal(self, *args, **kwargs) -> Any: ...
    def FindGlobalRegistered(self, *args, **kwargs) -> Any: ...
    def FindMemory(self, *args, **kwargs) -> Any: ...
    def FindMemoryRegistered(self, *args, **kwargs) -> Any: ...
    def FindTable(self, *args, **kwargs) -> Any: ...
    def FindTableRegistered(self, *args, **kwargs) -> Any: ...
    def ListFunction(self, arg0: int) -> list: ...
    def ListFunctionLength(self) -> int: ...
    def ListFunctionRegistered(self, arg0: str, arg1: int) -> list: ...
    def ListFunctionRegisteredLength(self, arg0: str) -> int: ...
    def ListGlobal(self, arg0: int) -> list: ...
    def ListGlobalLength(self) -> int: ...
    def ListGlobalRegistered(self, arg0: str, arg1: int) -> list: ...
    def ListGlobalRegisteredLength(self, arg0: str) -> int: ...
    def ListMemory(self, arg0: int) -> list: ...
    def ListMemoryLength(self) -> int: ...
    def ListMemoryRegistered(self, arg0: str, arg1: int) -> list: ...
    def ListMemoryRegisteredLength(self, arg0: str) -> int: ...
    def ListModule(self, arg0: int) -> list: ...
    def ListModuleLength(self) -> int: ...
    def ListTable(self, arg0: int) -> list: ...
    def ListTableLength(self) -> int: ...
    def ListTableRegistered(self, arg0: str, arg1: int) -> list: ...
    def ListTableRegisteredLength(self, arg0: str) -> int: ...

class Table:
    def __init__(self, arg0: TableType) -> None: ...
    def GetData(self, arg0: int) -> tuple: ...
    def GetSize(self) -> int: ...
    def GetType(self) -> TableType: ...
    def GrowSize(self, arg0: int) -> Result: ...
    def SetData(self, arg0: Value, arg1: int) -> Result: ...

class TableType:
    def __init__(self, arg0: RefType, arg1: Limit) -> None: ...
    def GetLimit(self) -> Limit: ...
    def GetRefType(self) -> RefType: ...

class Type:
    __members__: ClassVar[dict] = ...  # read-only
    ExternRef: ClassVar[Type] = ...
    F32: ClassVar[Type] = ...
    F64: ClassVar[Type] = ...
    FuncRef: ClassVar[Type] = ...
    I32: ClassVar[Type] = ...
    I64: ClassVar[Type] = ...
    V128: ClassVar[Type] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class VM:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Configure) -> None: ...
    @overload
    def __init__(self, arg0: Store) -> None: ...
    @overload
    def __init__(self, arg0: Configure, arg1: Store) -> None: ...
    def AsyncExecute(self, *args, **kwargs) -> Any: ...
    def AsyncExecuteRegistered(self, *args, **kwargs) -> Any: ...
    def AsyncRunWasmFromASTModule(self, *args, **kwargs) -> Any: ...
    def AsyncRunWasmFromBuffer(self, *args, **kwargs) -> Any: ...
    def AsyncRunWasmFromFile(self, *args, **kwargs) -> Any: ...
    def Execute(self, arg0: str, arg1: tuple, arg2: int) -> tuple: ...
    def ExecuteRegistered(
        self, arg0: str, arg1: str, arg2: list, arg3: int
    ) -> tuple: ...
    def GetFunctionList(self, arg0: int) -> dict: ...
    def GetFunctionListLength(self) -> int: ...
    def GetFunctionType(self, *args, **kwargs) -> Any: ...
    def GetFunctionTypeRegistered(self, *args, **kwargs) -> Any: ...
    def GetImportModuleContext(self, *args, **kwargs) -> Any: ...
    def GetStatistics(self) -> Statistics: ...
    def GetStoreContext(self) -> Store: ...
    def Instantiate(self) -> Result: ...
    def LoadWasmFromASTModule(self, arg0: ASTModule) -> Result: ...
    def LoadWasmFromBuffer(self, arg0: tuple) -> Result: ...
    def LoadWasmFromFile(self, arg0: str) -> Result: ...
    def RegisterModuleFromASTModule(
        self, arg0: str, arg1: ASTModule
    ) -> Result: ...
    def RegisterModuleFromBuffer(self, arg0: str, arg1: tuple) -> Result: ...
    def RegisterModuleFromFile(self, arg0: str, arg1: str) -> Result: ...
    def RegisterModuleFromImport(self, arg0) -> Result: ...
    def RunWasmFromASTModule(
        self, arg0: ASTModule, arg1: str, arg2: tuple, arg3: int
    ) -> tuple: ...
    def RunWasmFromBuffer(
        self, arg0: tuple, arg1: tuple, arg2: str, arg3: int
    ) -> tuple: ...
    def RunWasmFromFile(
        self, arg0: str, arg1: str, arg2: tuple, arg3: int
    ) -> tuple: ...
    def Validate(self) -> Result: ...

class Validator:
    def __init__(self, arg0: Configure) -> None: ...
    def validate(self, arg0: ASTModule) -> Result: ...

class Value:
    Value: object
    def __init__(self, arg0: object, arg1: Type) -> None: ...
    @property
    def Type(self) -> Type: ...

def AsyncDelete(arg0: Async) -> None: ...
def VersionGet() -> str: ...
def VersionGetMajor() -> int: ...
def VersionGetMinor() -> int: ...
def VersionGetPatch() -> int: ...
