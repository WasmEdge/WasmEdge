diff -rup a/Utilities/cmlibuv/src/unix/async.c b/Utilities/cmlibuv/src/unix/async.c
--- a/Utilities/cmlibuv/src/unix/async.c	2020-12-16 12:35:29.000000000 +0000
+++ b/Utilities/cmlibuv/src/unix/async.c	2020-12-22 18:36:14.000000000 +0000
@@ -34,7 +34,7 @@
 #include <unistd.h>
 #include <sched.h>  /* sched_yield() */
 
-#ifdef __linux__
+#if defined(__linux__) && __GLIBC_PREREQ(2, 8)
 #include <sys/eventfd.h>
 #endif
 
@@ -175,7 +175,7 @@ static void uv__async_send(uv_loop_t* lo
   len = 1;
   fd = loop->async_wfd;
 
-#if defined(__linux__)
+#if defined(__linux__) && __GLIBC_PREREQ(2, 8)
   if (fd == -1) {
     static const uint64_t val = 1;
     buf = &val;
@@ -206,7 +206,7 @@ static int uv__async_start(uv_loop_t* lo
   if (loop->async_io_watcher.fd != -1)
     return 0;
 
-#ifdef __linux__
+#if defined(__linux__) && __GLIBC_PREREQ(2, 8)
   err = eventfd(0, EFD_CLOEXEC | EFD_NONBLOCK);
   if (err < 0)
     return UV__ERR(errno);
diff -rup a/Utilities/cmlibuv/src/unix/core.c b/Utilities/cmlibuv/src/unix/core.c
--- a/Utilities/cmlibuv/src/unix/core.c	2020-12-16 12:35:29.000000000 +0000
+++ b/Utilities/cmlibuv/src/unix/core.c	2020-12-22 18:07:40.000000000 +0000
@@ -88,7 +88,9 @@ extern char** environ;
 
 #if defined(__linux__)
 # include <sys/syscall.h>
-# define uv__accept4 accept4
+# if __GLIBC_PREREQ(2, 10)
+#  define uv__accept4 accept4
+# endif
 #endif
 
 static int uv__run_pending(uv_loop_t* loop);
@@ -1032,7 +1034,7 @@ int uv__open_cloexec(const char* path, i
 
 
 int uv__dup2_cloexec(int oldfd, int newfd) {
-#if defined(__FreeBSD__) || defined(__NetBSD__) || defined(__linux__)
+#if defined(__FreeBSD__) || defined(__NetBSD__) || (defined(__linux__) && __GLIBC_PREREQ(2, 9))
   int r;
 
   r = dup3(oldfd, newfd, O_CLOEXEC);
diff -rup a/Utilities/cmlibuv/src/unix/fs.c b/Utilities/cmlibuv/src/unix/fs.c
--- a/Utilities/cmlibuv/src/unix/fs.c	2020-12-16 12:35:29.000000000 +0000
+++ b/Utilities/cmlibuv/src/unix/fs.c	2020-12-22 18:10:56.000000000 +0000
@@ -224,7 +224,7 @@ UV_UNUSED(static struct timeval uv__fs_t
 }
 
 static ssize_t uv__fs_futime(uv_fs_t* req) {
-#if defined(__linux__)                                                        \
+#if (defined(__linux__) && __GLIBC_PREREQ(2, 6))                              \
     || defined(_AIX71)                                                        \
     || defined(__HAIKU__)
   /* utimesat() has nanosecond resolution but we stick to microseconds
@@ -234,7 +234,8 @@ static ssize_t uv__fs_futime(uv_fs_t* re
   ts[0] = uv__fs_to_timespec(req->atime);
   ts[1] = uv__fs_to_timespec(req->mtime);
   return futimens(req->file, ts);
-#elif defined(__APPLE__)                                                      \
+#elif (defined(__linux__) && !__GLIBC_PREREQ(2, 6))                           \
+    || defined(__APPLE__)                                                     \
     || defined(__DragonFly__)                                                 \
     || defined(__FreeBSD__)                                                   \
     || defined(__FreeBSD_kernel__)                                            \
@@ -1016,7 +1017,7 @@ ok:
 
 
 static ssize_t uv__fs_utime(uv_fs_t* req) {
-#if defined(__linux__)                                                         \
+#if (defined(__linux__) && __GLIBC_PREREQ(2, 6))                               \
     || defined(_AIX71)                                                         \
     || defined(__sun)                                                          \
     || defined(__HAIKU__)
@@ -1027,7 +1028,8 @@ static ssize_t uv__fs_utime(uv_fs_t* req
   ts[0] = uv__fs_to_timespec(req->atime);
   ts[1] = uv__fs_to_timespec(req->mtime);
   return utimensat(AT_FDCWD, req->path, ts, 0);
-#elif defined(__APPLE__)                                                      \
+#elif (defined(__linux__) && !__GLIBC_PREREQ(2, 6))                           \
+    || defined(__APPLE__)                                                     \
     || defined(__DragonFly__)                                                 \
     || defined(__FreeBSD__)                                                   \
     || defined(__FreeBSD_kernel__)                                            \
@@ -1059,7 +1061,7 @@ static ssize_t uv__fs_utime(uv_fs_t* req
 
 
 static ssize_t uv__fs_lutime(uv_fs_t* req) {
-#if defined(__linux__)            ||                                           \
+#if (defined(__linux__) && __GLIBC_PREREQ(2, 6))  ||                           \
     defined(_AIX71)               ||                                           \
     defined(__sun)                ||                                           \
     defined(__HAIKU__)
@@ -1067,7 +1069,8 @@ static ssize_t uv__fs_lutime(uv_fs_t* re
   ts[0] = uv__fs_to_timespec(req->atime);
   ts[1] = uv__fs_to_timespec(req->mtime);
   return utimensat(AT_FDCWD, req->path, ts, AT_SYMLINK_NOFOLLOW);
-#elif defined(__APPLE__)          ||                                          \
+#elif (defined(__linux__) && !__GLIBC_PREREQ(2, 6))       ||                  \
+      defined(__APPLE__)          ||                                          \
       defined(__DragonFly__)      ||                                          \
       defined(__FreeBSD__)        ||                                          \
       defined(__FreeBSD_kernel__) ||                                          \
diff -rup a/Utilities/cmlibuv/src/unix/linux-core.c b/Utilities/cmlibuv/src/unix/linux-core.c
--- a/Utilities/cmlibuv/src/unix/linux-core.c	2020-12-16 12:35:29.000000000 +0000
+++ b/Utilities/cmlibuv/src/unix/linux-core.c	2020-12-22 18:13:06.000000000 +0000
@@ -85,7 +85,12 @@ static uint64_t read_cpufreq(unsigned in
 
 int uv__platform_loop_init(uv_loop_t* loop) {
   int fd;
+#if __GLIBC_PREREQ(2, 9)
   fd = epoll_create1(O_CLOEXEC);
+#else
+  fd = -1;
+  errno = ENOSYS;
+#endif
 
   /* epoll_create1() can fail either because it's not implemented (old kernel)
    * or because it doesn't understand the O_CLOEXEC flag.
@@ -311,11 +316,16 @@ void uv__io_poll(uv_loop_t* loop, int ti
         abort();
 
     if (no_epoll_wait != 0 || (sigmask != 0 && no_epoll_pwait == 0)) {
+#if __GLIBC_PREREQ(2, 6)
       nfds = epoll_pwait(loop->backend_fd,
                          events,
                          ARRAY_SIZE(events),
                          timeout,
                          &sigset);
+#else
+      nfds = -1;
+      errno = ENOSYS;
+#endif
       if (nfds == -1 && errno == ENOSYS) {
         uv__store_relaxed(&no_epoll_pwait_cached, 1);
         no_epoll_pwait = 1;
diff -rup a/Utilities/cmlibuv/src/unix/linux-inotify.c b/Utilities/cmlibuv/src/unix/linux-inotify.c
--- a/Utilities/cmlibuv/src/unix/linux-inotify.c	2020-12-16 12:35:29.000000000 +0000
+++ b/Utilities/cmlibuv/src/unix/linux-inotify.c	2020-12-22 18:16:16.000000000 +0000
@@ -71,10 +71,22 @@ static int init_inotify(uv_loop_t* loop)
   if (loop->inotify_fd != -1)
     return 0;
 
+#if __GLIBC_PREREQ(2, 6)
   fd = inotify_init1(IN_NONBLOCK | IN_CLOEXEC);
+#else
+  fd = inotify_init();
+#endif
+
   if (fd < 0)
     return UV__ERR(errno);
 
+#if !__GLIBC_PREREQ(2, 6)
+  if (uv__nonblock(fd, 1) || uv__cloexec(fd, 1)) {
+    uv__close(fd);
+    return UV__ERR(errno);
+  }
+#endif
+
   loop->inotify_fd = fd;
   uv__io_init(&loop->inotify_read_watcher, uv__inotify_read, loop->inotify_fd);
   uv__io_start(loop, &loop->inotify_read_watcher, POLLIN);
diff -rup a/Utilities/cmlibuv/src/unix/process.c b/Utilities/cmlibuv/src/unix/process.c
--- a/Utilities/cmlibuv/src/unix/process.c	2020-12-16 12:35:29.000000000 +0000
+++ b/Utilities/cmlibuv/src/unix/process.c	2020-12-22 18:23:18.000000000 +0000
@@ -124,7 +124,7 @@ static void uv__chld(uv_signal_t* handle
 
 
 static int uv__make_socketpair(int fds[2]) {
-#if defined(__FreeBSD__) || defined(__linux__)
+#if defined(__FreeBSD__) || (defined(__linux__) && __GLIBC_PREREQ(2, 9))
   if (socketpair(AF_UNIX, SOCK_STREAM | SOCK_CLOEXEC, 0, fds))
     return UV__ERR(errno);
 
@@ -151,7 +151,7 @@ static int uv__make_socketpair(int fds[2
 
 
 int uv__make_pipe(int fds[2], int flags) {
-#if defined(__FreeBSD__) || defined(__linux__)
+#if defined(__FreeBSD__) || (defined(__linux__) && __GLIBC_PREREQ(2, 9))
   if (pipe2(fds, flags | O_CLOEXEC))
     return UV__ERR(errno);
 
