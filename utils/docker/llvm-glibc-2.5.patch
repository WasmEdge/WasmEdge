--- a/lib/Support/Host.cpp 2020-12-17 20:09:25.321395012 +0000
+++ b/lib/Support/Host.cpp 2020-12-17 20:29:40.296551916 +0000
@@ -1225,6 +1225,15 @@ StringRef sys::getHostCPUName() { return
 #endif

 #if defined(__linux__) && (defined(__i386__) || defined(__x86_64__))
+#if !defined(CPU_COUNT)
+static inline auto CPU_COUNT(const cpu_set_t *Set) noexcept {
+  int Count = 0;
+  for (const auto &Bits : Set->__bits) {
+    Count += __builtin_popcountl(Bits);
+  }
+  return Count;
+}
+#endif
 // On Linux, the number of physical cores can be computed from /proc/cpuinfo,
 // using the number of unique physical/core id pairs. The following
 // implementation reads the /proc/cpuinfo format on an x86_64 system.

--- a/lib/Support/Unix/Threading.inc 2020-12-17 20:09:25.325395024 +0000
+++ b/lib/Support/Unix/Threading.inc 2020-12-17 20:24:57.267834738 +0000
@@ -281,6 +281,16 @@ SetThreadPriorityResult llvm::set_thread

 #include <thread>

+#if !defined(CPU_COUNT)
+static inline auto CPU_COUNT(const cpu_set_t *Set) noexcept {
+  int Count = 0;
+  for (const auto &Bits : Set->__bits) {
+    Count += __builtin_popcountl(Bits);
+  }
+  return Count;
+}
+#endif
+
 int computeHostNumHardwareThreads() {
 #ifdef __linux__
   cpu_set_t Set;

