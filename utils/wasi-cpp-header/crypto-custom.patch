--- a/api.hpp
+++ b/api.hpp
@@ -435,7 +435,7 @@ static_assert(alignof(__wasi_version_t) == 8, "witx calculated align");
 /**
  * Size of a value.
  */
-using __wasi_size_t = size_t;
+using __wasi_size_t = uint32_t;
 
 static_assert(sizeof(__wasi_size_t) == 4, "witx calculated size");
 static_assert(alignof(__wasi_size_t) == 4, "witx calculated align");
@@ -458,7 +458,7 @@ static_assert(alignof(__wasi_timestamp_t) == 8, "witx calculated align");
  * 
  * An `array_output` handle is automatically closed after its full content has been consumed.
  */
-using __wasi_array_output_t = int32_t;
+using __wasi_array_output_t = uint32_t;
 
 static_assert(sizeof(__wasi_array_output_t) == 4, "witx calculated size");
 static_assert(alignof(__wasi_array_output_t) == 4, "witx calculated align");
@@ -470,7 +470,7 @@ static_assert(alignof(__wasi_array_output_t) == 4, "witx calculated align");
  * 
  * The exact set of allowed options depends on the algorithm being used.
  */
-using __wasi_options_t = int32_t;
+using __wasi_options_t = uint32_t;
 
 static_assert(sizeof(__wasi_options_t) == 4, "witx calculated size");
 static_assert(alignof(__wasi_options_t) == 4, "witx calculated align");
@@ -480,7 +480,7 @@ static_assert(alignof(__wasi_options_t) == 4, "witx calculated align");
  * 
  * This is used to generate, retrieve and invalidate managed keys.
  */
-using __wasi_secrets_manager_t = int32_t;
+using __wasi_secrets_manager_t = uint32_t;
 
 static_assert(sizeof(__wasi_secrets_manager_t) == 4, "witx calculated size");
 static_assert(alignof(__wasi_secrets_manager_t) == 4, "witx calculated align");
@@ -488,7 +488,7 @@ static_assert(alignof(__wasi_secrets_manager_t) == 4, "witx calculated align");
 /**
  * A key pair.
  */
-using __wasi_keypair_t = int32_t;
+using __wasi_keypair_t = uint32_t;
 
 static_assert(sizeof(__wasi_keypair_t) == 4, "witx calculated size");
 static_assert(alignof(__wasi_keypair_t) == 4, "witx calculated align");
@@ -500,7 +500,7 @@ static_assert(alignof(__wasi_keypair_t) == 4, "witx calculated align");
  * 
  * A subsequent signature would sign all the data accumulated since the creation of the state object.
  */
-using __wasi_signature_state_t = int32_t;
+using __wasi_signature_state_t = uint32_t;
 
 static_assert(sizeof(__wasi_signature_state_t) == 4, "witx calculated size");
 static_assert(alignof(__wasi_signature_state_t) == 4, "witx calculated align");
@@ -508,7 +508,7 @@ static_assert(alignof(__wasi_signature_state_t) == 4, "witx calculated align");
 /**
  * A signature.
  */
-using __wasi_signature_t = int32_t;
+using __wasi_signature_t = uint32_t;
 
 static_assert(sizeof(__wasi_signature_t) == 4, "witx calculated size");
 static_assert(alignof(__wasi_signature_t) == 4, "witx calculated align");
@@ -516,7 +516,7 @@ static_assert(alignof(__wasi_signature_t) == 4, "witx calculated align");
 /**
  * A public key, for key exchange and signature verification.
  */
-using __wasi_publickey_t = int32_t;
+using __wasi_publickey_t = uint32_t;
 
 static_assert(sizeof(__wasi_publickey_t) == 4, "witx calculated size");
 static_assert(alignof(__wasi_publickey_t) == 4, "witx calculated align");
@@ -524,7 +524,7 @@ static_assert(alignof(__wasi_publickey_t) == 4, "witx calculated align");
 /**
  * A secret key, for key exchange mechanisms.
  */
-using __wasi_secretkey_t = int32_t;
+using __wasi_secretkey_t = uint32_t;
 
 static_assert(sizeof(__wasi_secretkey_t) == 4, "witx calculated size");
 static_assert(alignof(__wasi_secretkey_t) == 4, "witx calculated align");
@@ -532,7 +532,7 @@ static_assert(alignof(__wasi_secretkey_t) == 4, "witx calculated align");
 /**
  * A state to absorb signed data to be verified.
  */
-using __wasi_signature_verification_state_t = int32_t;
+using __wasi_signature_verification_state_t = uint32_t;
 
 static_assert(sizeof(__wasi_signature_verification_state_t) == 4, "witx calculated size");
 static_assert(alignof(__wasi_signature_verification_state_t) == 4, "witx calculated align");
@@ -543,7 +543,7 @@ static_assert(alignof(__wasi_signature_verification_state_t) == 4, "witx calcula
  * The state is not reset nor invalidated after an option has been performed.
  * Incremental updates and sessions are thus supported.
  */
-using __wasi_symmetric_state_t = int32_t;
+using __wasi_symmetric_state_t = uint32_t;
 
 static_assert(sizeof(__wasi_symmetric_state_t) == 4, "witx calculated size");
 static_assert(alignof(__wasi_symmetric_state_t) == 4, "witx calculated align");
@@ -555,7 +555,7 @@ static_assert(alignof(__wasi_symmetric_state_t) == 4, "witx calculated align");
  * 
  * If it was imported, the host will wipe it from memory as soon as the handle is closed.
  */
-using __wasi_symmetric_key_t = int32_t;
+using __wasi_symmetric_key_t = uint32_t;
 
 static_assert(sizeof(__wasi_symmetric_key_t) == 4, "witx calculated size");
 static_assert(alignof(__wasi_symmetric_key_t) == 4, "witx calculated align");
@@ -571,7 +571,7 @@ static_assert(alignof(__wasi_symmetric_key_t) == 4, "witx calculated align");
  * 
  * The host is reponsible for securely wiping them from memory on close.
  */
-using __wasi_symmetric_tag_t = int32_t;
+using __wasi_symmetric_tag_t = uint32_t;
 
 static_assert(sizeof(__wasi_symmetric_tag_t) == 4, "witx calculated size");
 static_assert(alignof(__wasi_symmetric_tag_t) == 4, "witx calculated align");
@@ -597,7 +597,7 @@ union __wasi_opt_options_u_t {
   __wasi_options_t some;
 };
 struct __wasi_opt_options_t {
-  uint8_t tag;
+  __wasi_opt_options_u_e_t tag;
   __wasi_opt_options_u_t u;
 };
 
@@ -626,7 +626,7 @@ union __wasi_opt_symmetric_key_u_t {
   __wasi_symmetric_key_t some;
 };
 struct __wasi_opt_symmetric_key_t {
-  uint8_t tag;
+  __wasi_opt_symmetric_key_u_e_t tag;
   __wasi_opt_symmetric_key_u_t u;
 };
 
